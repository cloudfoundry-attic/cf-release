
user  vcap vcap;
worker_processes  1;
worker_rlimit_nofile 16384;

error_log /var/vcap/sys/log/nginx/nginx.error.log;
pid       /var/vcap/sys/run/nginx/nginx.pid;

events {
  worker_connections  8192;
  use epoll;
}

http {
  include       mime.types;
  default_type  text/html;
  server_tokens off;

  log_format main  '$host - [$time_local] '
                   '"$request" $status $bytes_sent '
                   '"$http_referer" "$http_user_agent" '
                   '$remote_addr $proxy_add_x_forwarded_for response_time:$upstream_response_time app_id:$app_id';


  access_log  /var/vcap/sys/log/nginx/nginx.access.log  main;

  sendfile             on;
  tcp_nopush           on;
  tcp_nodelay          on;

  keepalive_timeout  75 20;

  gzip                 on;
  gzip_min_length      1250;
  gzip_buffers         16 8k;
  gzip_comp_level      2;
  gzip_proxied         any;
  gzip_types           text/plain text/css application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
  gzip_vary            on;
  gzip_disable         "MSIE [1-6]\.(?!.*SV1)";

  client_max_body_size 256M;

  upstream cloud_controller {
    #server  127.0.0.1:9025; #NOT SECURE -- for debugging use only!!!!!
    <% if properties.cc_props == "ccng" %>
    server unix:/var/vcap/sys/run/cloud_controller_ng/cloud_controller.sock;
    <% else %>
    server unix:/var/vcap/sys/run/cloud_controller/cloud_controller.sock;
    <% end %>
  }

  <% if properties.router.status %>
  upstream router_status {
    server <%= spec.networks.send(properties.networks.apps).ip %>:<%= properties.router.status.port %>;
  }
  <% end %>

  # router server
  server {
    listen       80;
    server_name  "<%= properties.domain %>";
    server_name_in_redirect off;

    #TODO: how to make this internal location totally transparent to outside
    location = /vcapuls {
      internal;
      # We should use rewrite_by_lua to scrub subrequest headers
      # as uls doesn't care those headers at all.
      # Given there are some exceptions to clear some headers,
      # we just leave them as is.

      proxy_pass http://unix:/var/vcap/sys/run/router/router.sock:/;
    }

    location / {
      access_log /var/vcap/sys/log/nginx/router.access.log  main;
      proxy_buffering             off;
      proxy_set_header            Host $host;
      proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_redirect              off;
      proxy_connect_timeout       10;
      proxy_send_timeout          <%= p("router.client_inactivity_timeout", 300) %>;
      proxy_read_timeout          <%= p("router.app_inactivity_timeout", 300) %>;

      set $health_monitor '';
      set $app_id 0;
      <% if properties.router.status %>
      if ($http_user_agent = "HTTP-Monitor/1.1") {
        set $health_monitor T;
      }
      if ($http_host = "") {
        set $health_monitor "${health_monitor}T";
      }
      if ($health_monitor = TT) {
        # Trigger a subrequest to sync the latest few stats of the worker to uls,
        # if we have multiple workers, there will be still few stats not synced for
        # the workers which don't get this monitor request.
        access_by_lua '
          local uls = require ("uls")
          ngx.log(ngx.DEBUG, "monitor trigger stats syncup")

          -- generate one subrequest to uls to update stats
          ngx.location.capture(
            "/vcapuls", {body = uls.generate_stats_request()}
          )
        ';

        more_set_input_headers "Authorization: Basic <%= Base64.encode64("#{properties.router.status.user}:#{properties.router.status.password}").strip %>";
        rewrite ^.*$ /healthz break;
        proxy_pass                 http://router_status;
      }
      <% end %>

      # We intend to have one "if" block to avoid the above monitor location
      # to twist with below upstream locator server handling.
      # ("if" block effectively creates a nested location and will inherit
      # all the rewrite/access phase handlers of outer location)
      if ($health_monitor != TT) {
        # The following variables are used by lua module code.
        # DO NOT remove or rename any of them!
        set $backend_addr ''; # Backend server address returned from uls for this request
        set $uls_req_tags ''; # Request tags returned from uls for this request to catalog statistics
        set $router_ip '';
        set $timestamp 0;
        set $trace '';
        set $sticky '';

        access_by_lua '
          local uls = require ("uls")
          uls.pre_process_subrequest(ngx, "<%= properties.router.trace_key or 22 %>")

          -- generate one subrequest to uls for url query
          local res = ngx.location.capture(
            "/vcapuls", {body = uls.generate_uls_request(ngx)}
          )

          uls.post_process_subrequest(ngx, res)
        ';

        proxy_pass http://$backend_addr;

        # Handling response from backend servers
        header_filter_by_lua '
          local uls = require ("uls")

          uls.post_process_response(ngx)
        ';
      }
    }
  }

  # cloud controller server
  server {
    listen    9022;
    server_name  _;
    server_name_in_redirect off;

    #proxy and log all CC traffic
    location / {
      access_log /var/vcap/sys/log/nginx/nginx.access.log  main;
      proxy_buffering             off;
      proxy_set_header            Host $host;
      proxy_set_header            X-Real_IP $remote_addr;
      proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_redirect              off;
      proxy_connect_timeout       10;
      proxy_send_timeout          <%= p("router.client_inactivity_timeout", 300) %>;
      proxy_read_timeout          <%= p("router.app_inactivity_timeout", 300) %>;
      proxy_pass                 http://cloud_controller;
    }

    #used for x-accel-redirect uri://location/foo.txt
    #nginx will serve the file root || location || foo.txt
    location /droplets/ {
      internal;
      root   /var/vcap/shared;
    }

    <% if properties.cc_props == "ccng" %>
    location ~ (/apps/.*/application|/v2/apps/.*/bits|/services/v\d+/configurations/.*/serialized/data) {
    <% else %>
    location ~ (/apps/.*/application|/services/v\d+/configurations/.*/serialized/data) {
    <% end %>
      # Pass altered request body to this location
      upload_pass   @cc_uploads;
      upload_pass_args on;

      # Store files to this directory
      <% if properties.cc_props == "ccng" %>
      upload_store /var/vcap/data/cloud_controller_ng/tmp/uploads;
      <% else %>
      upload_store /var/vcap/data/cloud_controller/tmp/uploads;
      <% end %>

      # No limit for output body forwarded to CC
      upload_max_output_body_len 0;

      # Allow uploaded files to be read only by user
      upload_store_access user:r;

      # Set specified fields in request body
      upload_set_form_field "${upload_field_name}_name" $upload_file_name;
      upload_set_form_field "${upload_field_name}_path" $upload_tmp_path;

      #forward the following fields from existing body
      upload_pass_form_field "^resources$";
      upload_pass_form_field "^_method$";

      #on any error, delete uploaded files.
      upload_cleanup 400-505;
    }

    # Droplet uploads from the stager should be authenticated
    <% if properties.cc_props == "ccng" %>
    location /staging/droplets/ {
    <% else %>
    location ~ /staging/droplet/ {
    <% end %>
      # Pass along auth header
      set $auth_header $upstream_http_x_auth;
      proxy_set_header Authorization $auth_header;

      # Pass altered request body to this location
      upload_pass   @cc_uploads;

      # Store files to this directory
      <% if properties.cc_props == "ccng" %>
      upload_store /var/vcap/data/cloud_controller_ng/tmp/staged_droplet_uploads;
      <% else %>
      upload_store /var/vcap/data/cloud_controller/tmp/staged_droplet_uploads;
      <% end %>

      # Allow uploaded files to be read only by user
      upload_store_access user:r;

      # Set specified fields in request body
      upload_set_form_field "droplet_path" $upload_tmp_path;

      #on any error, delete uploaded files.
      upload_cleanup 400-505;
    }

    # Pass altered request body to a backend
    location @cc_uploads {
      #proxy_pass   http://localhost:9025; #NOT SECURE - for debugging use only!!!!
      <% if properties.cc_props == "ccng" %>
      proxy_pass http://unix:/var/vcap/sys/run/cloud_controller_ng/cloud_controller.sock;
      <% else %>
      proxy_pass http://unix:/var/vcap/sys/run/cloud_controller/cloud_controller.sock;
      <% end %>
    }

    location ~ ^/internal_redirect/(.*){
      # only allow internal redirects
      internal;

      set $download_url $1;

      #have to manualy pass along auth header
      set $auth_header $upstream_http_x_auth;
      proxy_set_header Authorization $auth_header;

      # Download the file and send it to client
      proxy_pass $download_url;
    }
  }
}
