#!/bin/sh

mkdir -p /var/vcap/sys/log/mysql

log_echo() {
  echo "`date` $1" >> /var/vcap/sys/log/mysql/mysql_create_tmp_dir.log
}

create_tmp_file() {
  size=$1
  file_path=$2
  /usr/bin/truncate -s ${size}M ${file_path}
  if [ ! $? -eq 0 ]; then
    log_echo "ERROR: fail to create the loop file for mysql tmp directory"
    # delete the incomplete file
    rm -rf $file_path
    exit 1
  else
    chmod 0700 $file_path
  fi
}

mysql_tmp_in=/var/vcap/data
mysql_tmp_loop_file="$mysql_tmp_in/mysql_tmp_loop"
mysql_tmp_dir="$mysql_tmp_in/mysql_tmp"

# unit of size should be MB, default size is 2GB
mysql_tmp_size=<%= properties.mysql_node.max_tmp || 2048 %>
# greedy_level, recreate files and directories if possible, may delete the file and direcotry with the same names or, just report
greedy_level=<%= properties.mysql_node.tmp_greedy_level || 1 %>


will_create_file=0
will_setup_loop=0
will_create_dir=0

# check whether the mysql_tmp_loop has been created, if not, try to create it

if [ ! -f "$mysql_tmp_loop_file" ]; then
  create_tmp_file $mysql_tmp_size $mysql_tmp_loop_file
fi

size=`ls -l $mysql_tmp_loop_file | cut -d" " -f5`
expect_size=`expr $mysql_tmp_size \* 1024 \* 1024`

if [ ! "$size" = "$expect_size" ]; then
  if [ $greedy_level -eq 0 ]; then
    # graceful, just notify
    log_echo "ERROR: there is a tmp loop file which has different size"
    exit 1
  else
    # not graceful, will delete the old file and recreate a new one if possible
    will_create_file=1
  fi
fi

ret=`losetup -a | grep "$mysql_tmp_loop_file"`
if [ ! -z "$ret" ]; then
  loop_dev=`echo "$ret" | cut -d: -f1`
  if [ -d "$mysql_tmp_dir" ]; then
    check_mount=`mount -l | grep "$loop_dev" | grep "$mysql_tmp_dir"`
    if [ ! -z "$check_mount" ]; then
      if [ $will_create_file -eq 0 ]; then
        # usually, starting mysql will come here
        chown vcap $mysql_tmp_dir
        exit 0
      fi
    else
      if [ $greedy_level -eq 0]; then
        log_echo "ERROR: $mysql_tmp_dir exists but not mounted to $loop_dev"
        exit 1
      else
        # must recreate the directory for mounting
        will_create_dir=1
      fi
    fi
  else
    # must create a new directory for mounting
    will_create_dir=1
  fi
else
  loop_dev=`losetup -f`
  if [ $? -ne 0 ]; then
    log_echo "ERROR: fail to get one free loop device"
    exit 1
  fi
  will_setup_loop=1
  if [ -d "$mysql_tmp_dir" ]; then
    if [ $greedy_level -eq 0]; then
      log_echo "ERROR: $mysql_tmp_dir exists but not mounted to the new loop device: $loop_dev"
      exit 1
    else
      # must recreate the directory for mounting
      will_create_dir=1
    fi
  else
    # must create a new directory for mounting
    will_create_dir=1
  fi
fi

if [ $will_create_file -eq 1 ]; then
  # delete the old file
  umount -d $mysql_tmp_dir
  rm -rf $mysql_tmp_dir
  losetup -d $loop_dev
  rm -rf $mysql_tmp_loop_file

  create_tmp_file $mysql_tmp_size $mysql_tmp_loop_file

  will_setup_loop=1
  will_create_dir=1
fi

if [ $will_setup_loop -eq 1 ]; then
  losetup $loop_dev $mysql_tmp_loop_file
  if [ $? -ne 0 ]; then
    log_echo "ERROR: fail to bind the loop device with the loop file"
    exit 1
  fi
  mke2fs -t ext4 $loop_dev
  if [ $? -ne 0 ]; then
    log_echo "ERROR: fail to make ext4 filesystem"
    exit 1
  fi
fi

if [ $will_create_dir -eq 1 ]; then
  umount -d $mysql_tmp_dir
  mkdir -p $mysql_tmp_dir
  mount -t ext4  $loop_dev $mysql_tmp_dir
  if [ $? -ne 0 ]; then
    log_echo "ERROR: fail to mount $loop_dev to $mysql_tmp_dir"
    exit 1
  fi
fi

chown vcap $mysql_tmp_dir
exit 0
