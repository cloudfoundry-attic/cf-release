<% if_p("syslog_aggregator.address", "syslog_aggregator.port", "syslog_aggregator.transport") do |address, port, transport| %>
$PrivDropToUser vcap
$PrivDropToGroup vcap
$ModLoad imuxsock                       # local message reception (rsyslog uses a datagram socket)
$MaxMessageSize 4k                      # default is 2k
$WorkDirectory /var/vcap/sys/rsyslog/buffered  # where messages should be buffered on disk

# Forward vcap messages to the aggregator
#
$ActionResumeRetryCount -1              # Try until the server becomes available
$ActionQueueType LinkedList             # Allocate on-demand
$ActionQueueFileName agg_backlog        # Spill to disk if queue is full
$ActionQueueMaxDiskSpace 32m            # Max size for disk queue
$ActionQueueLowWaterMark 2000           # Num messages. Assuming avg size of 512B, this is 1MiB.
$ActionQueueHighWaterMark 8000          # Num messages. Assuming avg size of 512B, this is 4MiB. (If this is reached, messages will spill to disk until the low watermark is reached).
$ActionQueueTimeoutEnqueue 0            # Discard messages if the queue + disk is full
$ActionQueueSaveOnShutdown on           # Save in-memory data to disk if rsyslog shuts down

<% ip = spec.networks.send(properties.networks.apps).ip %>
template(name="CfLogTemplate" type="list") {
        constant(value="<")
        property(name="pri")
        constant(value=">")
        property(name="timestamp" dateFormat="rfc3339")
        constant(value=" <%= ip.strip %> ")
        property(name="programname")
        constant(value=" [job=<%= name %> index=<%= spec.index.to_i %>] ")
        property(name="msg")
}

<% if transport == "relp" %>
$ModLoad omrelp
*.* :omrelp:<%= address %>:<%= port %>;CfLogTemplate
<% elsif transport == "udp" %>
*.* @<%= address %>:<%= port %>;CfLogTemplate
<% elsif transport == "tcp" %>
*.* @@<%= address %>:<%= port %>;CfLogTemplate
<% else %>
#only RELP, UDP, and TCP are supported
<% end %>

# Log vcap messages locally, too
#$template VcapComponentLogFile, "/var/log/%programname:6:$%/%programname:6:$%.log"
#$template VcapComponentLogFormat, "%timegenerated% %syslogseverity-text% -- %msg%\n"
#:programname, startswith, "vcap." -?VcapComponentLogFile;VcapComponentLogFormat

# Prevent them from reaching anywhere else
:programname, startswith, "vcap." ~

<% end.else do %>
# Prevent them from reaching anywhere else
:programname, startswith, "vcap." ~
<% end %>
