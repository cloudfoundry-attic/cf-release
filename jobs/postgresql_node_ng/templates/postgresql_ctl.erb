#!/bin/bash
<%
service = "postgresql"
plan_enabled = properties.service_plans && properties.service_plans.send(service.to_sym)
plan = properties.plan || "free"
plan_conf = plan_enabled && properties.service_plans.send(service.to_sym).send(plan.to_sym).configuration
abort unless properties.postgresql_node.password
%>
version=$1
shift

JOB_DIR=/var/vcap/jobs/postgresql_node_ng

case "$version" in
  "9.0")
    PACKAGE_DIR=/var/vcap/packages/postgresql
    DATA_DIR=/var/vcap/store/postgresql
    RUN_DIR=/var/vcap/sys/run/postgresql
    PIDFILE=$RUN_DIR/postgresql.pid
    LOG_DIR=/var/vcap/sys/log/postgresql
    SRC_CONF_FILE=$JOB_DIR/config/postgresql.conf
    PORT=5432

    ;;
  "9.1")
    PACKAGE_DIR=/var/vcap/packages/postgresql91
    DATA_DIR=/var/vcap/store/postgresql91
    RUN_DIR=/var/vcap/sys/run/postgresql
    PIDFILE=$RUN_DIR/postgresql91.pid
    LOG_DIR=/var/vcap/sys/log/postgresql91
    SRC_CONF_FILE=$JOB_DIR/config/postgresql91.conf
    PORT=5433

    ;;
esac

FIRST_TIME=0

source /var/vcap/packages/common/utils.sh

case "$1" in
  start)
    pid_guard $PIDFILE "PostgreSQL"

    mkdir -p $RUN_DIR
    echo $$ > $PIDFILE # Satisfy Monit in case of slow start
    <%if plan_conf && plan_conf.shmmax %>
    sysctl -w 'kernel.shmmax=<%=plan_conf.shmmax%>'
    <%else%>
    sysctl -w 'kernel.shmmax=284934144'
    <%end%>

    <%if plan_conf && plan_conf.shmall%>
    sysctl -w 'kernel.shmall=<%=plan_conf.shmall%>'
    <%else%>
    sysctl -w 'kernel.shmall=2097152'
    <%end%>

    if [ ! -d $DATA_DIR -o ! -f $DATA_DIR/postgresql.conf ]; then
      FIRST_TIME=1
      mkdir -p $DATA_DIR
      chown vcap:vcap $DATA_DIR

      su - vcap -c "LD_LIBRARY_PATH=$PACKAGE_DIR/lib:$LD_LIBRARY_PATH $PACKAGE_DIR/bin/initdb -E utf8 --locale en_US.UTF-8 -D $DATA_DIR"

      if [ $? != 0 ]; then
        echo "ERROR: Unable to initialize PostgreSQL DB"
        exit 1
      fi
    fi

    # update the hba file in data directory
    # By default, all access should provide password
    # Only vcap (sys-user) in the same VM could login as vcap (pg super user) without password
    pg_hba_conf_file=$DATA_DIR/pg_hba.conf
    sed -i /host[[:space:]]*all[[:space:]]*/d $pg_hba_conf_file
    echo "host all vcap 127.0.0.1/32 md5" >> $pg_hba_conf_file
    echo "host all vcap ::1/128 md5" >> $pg_hba_conf_file
    echo "host all vcap 0.0.0.0/0 reject" >> $pg_hba_conf_file
    echo "host all all 0.0.0.0/0 md5" >> $pg_hba_conf_file

    # update the config file in data directory
    rsync -arl $SRC_CONF_FILE $DATA_DIR/postgresql.conf

    # since postgresql service is alive
    # log dir change should cover both clean deploy and upgrade push
    if [ ! -d $LOG_DIR ]; then
      mkdir -p $LOG_DIR
      chown vcap:vcap $LOG_DIR
    fi

    echo "Starting PostgreSQL $version: "
    su - vcap -c "LD_LIBRARY_PATH=$PACKAGE_DIR/lib:$LD_LIBRARY_PATH $PACKAGE_DIR/bin/pg_ctl -w start -D $DATA_DIR -l \"$LOG_DIR/startup.log\""

    if [ $? == 0 ]; then
      echo "PostgreSQL start to set password."
      # This script is excuted by vcap which is the sys-user of postgres, so it could login without password
      su - vcap -c "LD_LIBRARY_PATH=$PACKAGE_DIR/lib:$LD_LIBRARY_PATH $PACKAGE_DIR/bin/psql -U vcap -p $PORT -d postgres -c \"alter role vcap password '<%= properties.postgresql_node.password %>'\""
      if [ $? == 0 ]; then
        echo "PostgreSQL set password successfully."
      else
        echo "PostgreSQL failed to set password."
        $0 stop
        exit 1
      fi
      echo "PostgreSQL $version started successfully"
      master_pid=`head -n 1 $DATA_DIR/postmaster.pid`
      echo $master_pid > $PIDFILE
      if [ $FIRST_TIME -eq 1 ]; then
        # Setup contrib packages
        for sqlf in citext.sql fuzzystrmatch.sql isn.sql ltree.sql pageinspect.sql pg_buffercache.sql pgcrypto.sql pg_freespacemap.sql sslinfo.sql tablefunc.sql uuid-ossp.sql
        do
          echo "Installing contrib package ${sqlf}"
          ${PACKAGE_DIR}/bin/psql -U vcap -p $PORT -f ${PACKAGE_DIR}/share/${sqlf} -d postgres
        done
      fi
      # absolve postmaster from OOM killer
      if [ -e /proc/$master_pid/oom_score_adj ]; then
        echo -1000 > /proc/$master_pid/oom_score_adj
      elif [ -e /proc/$master_pid/oom_adj ]; then
        # oom_adj is deprecated in 2.6.36+
        echo -17 > /proc/$master_pid/oom_adj
      fi
    else
      rm $PIDFILE
      if [ -e $DATA_DIR/postmaster.pid ]; then
        ps -p `head -n 1 $DATA_DIR/postmaster.pid` 1>/dev/null 2>/dev/null
        if [ $? == 1 ]; then
          echo "There is a stale postmaster pid file, will remove it and kill possible orphan processes"
          # remove the stale postmaster pid file
          rm $DATA_DIR/postmaster.pid
          # try to terminate the orphan processes in hack style
          ps -o pid,cmd --ppid=1 | grep 'postgres:' | cut -d' ' -f1 | xargs -r kill
        fi
      fi
      echo "The PostgreSQL server start seems to have some problems, please see logs for details."
      exit 1
    fi

    ;;

  stop)
    echo "Stopping PostgreSQL $version: "
    su - vcap -c "LD_LIBRARY_PATH=$PACKAGE_DIR/lib:$LD_LIBRARY_PATH $PACKAGE_DIR/bin/pg_ctl stop -m fast -w -D $DATA_DIR"
    wait_pidfile $PIDFILE

    ;;

  status)
    su - vcap -c "LD_LIBRARY_PATH=$PACKAGE_DIR/lib:$LD_LIBRARY_PATH $PACKAGE_DIR/bin/pg_ctl status -D $DATA_DIR"

    ;;

  *)
    echo "Usage: $0 {start|stop|status}"
    exit 1

    ;;

esac
