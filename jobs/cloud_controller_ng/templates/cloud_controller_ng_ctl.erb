#!/bin/bash

export CC_JOB_DIR=/var/vcap/jobs/cloud_controller_ng
export PATH=/var/vcap/packages/ruby/bin:$PATH

CC_PACKAGE_DIR=/var/vcap/packages/cloud_controller_ng

RUN_DIR=/var/vcap/sys/run/cloud_controller_ng
LOG_DIR=/var/vcap/sys/log/cloud_controller_ng
PIDFILE=$RUN_DIR/cloud_controller_ng.pid

export CONFIG_DIR=$CC_JOB_DIR/config
export CLOUD_CONTROLLER_NG_CONFIG=$CONFIG_DIR/cloud_controller_ng.yml
export BUNDLE_GEMFILE=$CC_PACKAGE_DIR/cloud_controller_ng/Gemfile
export HOME=/home/vcap # rake needs it to be set to run tasks
export TMPDIR=/var/vcap/data/cloud_controller_ng/tmp

<% if properties.env %>
<% if properties.env.http_proxy %>
export HTTP_PROXY='<%= properties.env.http_proxy %>'
export http_proxy='<%= properties.env.http_proxy %>'
<% end %>
<% if properties.env.https_proxy %>
export HTTPS_PROXY='<%= properties.env.https_proxy %>'
export https_proxy='<%= properties.env.https_proxy %>'
<% end %>
<% if properties.env.no_proxy %>
export NO_PROXY='<%= properties.env.no_proxy %>'
export no_proxy='<%= properties.env.no_proxy %>'
<% end %>
<% end %>

export C_INCLUDE_PATH=/var/vcap/packages/libpq/include:$C_INCLUDE_PATH
export LIBRARY_PATH=/var/vcap/packages/libpq/lib:$LIBRARY_PATH
export LANG=en_US.UTF-8

<% if_p("ccng.newrelic.license_key") do %>
export NRCONFIG=$CONFIG_DIR/newrelic.yml
export RACK_ENV=<%= properties.ccng.newrelic.environment_name %> # used by NewRelic
<% end %>

source /var/vcap/packages/common/utils.sh

case $1 in

  start)
    pid_guard $PIDFILE "Cloud controller ng"

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR
    mkdir -p $TMPDIR

    chown vcap:vcap $RUN_DIR
    chown vcap:vcap $LOG_DIR
    chown vcap:vcap $TMPDIR

    source $CC_JOB_DIR/bin/handle_nfs_or_local_blobstore.sh

    # Configure the core file location
    mkdir -p /var/vcap/sys/cores
    chown vcap:vcap /var/vcap/sys/cores
    echo /var/vcap/sys/cores/core-%e-%s-%p-%t > /proc/sys/kernel/core_pattern

    ulimit -c unlimited

    <% if_p("syslog_aggregator") do %>
    # TODO(kowshik): Configure Steno to write to the correct files.
    # Log to syslog agg, Log rotation.
    /var/vcap/packages/syslog_aggregator/setup_syslog_forwarder.sh $CONFIG_DIR
    <% end %>

    # Run the migrations only on the first CC launch
    <% if spec.index.to_i == 0 %>
      cd $CC_PACKAGE_DIR/cloud_controller_ng
      chpst -u vcap:vcap bundle exec rake db:migrate \<% if properties.syslog_aggregator && properties.syslog_aggregator.address %>
        > >(tee -a >(logger -p user.info -t vcap.db_migrate.stdout) $LOG_DIR/db_migrate.stdout.log) \
        2> >(tee -a >(logger -p user.error -t vcap.db_migrate.stderr) $LOG_DIR/db_migrate.stderr.log)<% else %>
        >>$LOG_DIR/db_migrate.stdout.log \
        2>>$LOG_DIR/db_migrate.stderr.log
        <% end %>

      if [ $? != 0 ]; then
        echo "Migrations failed"
        exit 1
      fi

      # TODO: remove the -m when we have a stand alone utility for loading
      # frameworks etc, and call those utilities here.  See corresponding
      # comments in ccng runner.
      exec chpst -u vcap:vcap $CC_PACKAGE_DIR/cloud_controller_ng/bin/cloud_controller -m \<% else %>
      exec chpst -u vcap:vcap $CC_PACKAGE_DIR/cloud_controller_ng/bin/cloud_controller \<% end %>
        -c $CLOUD_CONTROLLER_NG_CONFIG \<% if properties.syslog_aggregator && properties.syslog_aggregator.address %>
        > >(tee -a >(logger -p user.info -t vcap.cloud_controller_ng.stdout) $LOG_DIR/cloud_controller_ng.stdout.log) \
        2> >(tee -a >(logger -p user.error -t vcap.cloud_controller_ng.stderr) $LOG_DIR/cloud_controller_ng.stderr.log)<% else %>
        >>$LOG_DIR/cloud_controller_ng.stdout.log \
        2>>$LOG_DIR/cloud_controller_ng.stderr.log
        <% end %>
    ;;

  stop)
    kill_and_wait $PIDFILE
    ;;

  *)
    echo "Usage: cloud_controller_ng_ctl {start|stop}"
    ;;

esac
