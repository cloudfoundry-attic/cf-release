#!/bin/bash -e

export JAVA_HOME=/var/vcap/packages/dea_jvm
export PATH=/var/vcap/packages/dea_jvm/bin:$PATH

BIN_DIR=/var/vcap/jobs/opentsdb/bin
RUN_DIR=/var/vcap/sys/run/opentsdb
LOG_DIR=/var/vcap/sys/log/opentsdb
PIDFILE=$RUN_DIR/opentsdb.pid
TSDTMP=/var/vcap/data/tsdtmp

TSDB=$BIN_DIR/tsdb
CLEANUP_SCRIPT=/etc/cron.d/cleanup_tsdb_tmpdir

source /var/vcap/packages/common/utils.sh

case $1 in

  start)
    pid_guard $PIDFILE "OpenTSDB"

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR
    echo $$ > $PIDFILE

    mkdir -p $TSDTMP

    if grep -qs " ${TSDTMP} " /proc/mounts; then
      echo "Found tmpfs mount"
    else
      echo "Mounting tmpfs..."
      mount -t tmpfs -o size=512m tmpfs $TSDTMP
    fi

    # Blow away cache directory once every 30 minutes if it's over 400M
    echo "*/10 * * * * root $BIN_DIR/cleanup_tmpdir $TSDTMP 400" > $CLEANUP_SCRIPT

    cd /var/vcap/packages/opentsdb/

    env COMPRESSION=snappy HBASE_HOME=/var/vcap/packages/hbase ./src/create_table.sh

    METRICS=$( cat <<SETVAR
    mem
    healthy

    services.nfs_free_space
    services.healthy_instances
    services.online_nodes
    services.plans.high_water
    services.plans.low_water
    services.plans.score
    services.plans.allow_over_provisioning

    dea.max_memory
    frameworks.used_cpu
    frameworks.used_disk
    frameworks.used_memory
    frameworks.reserved_memory
    runtimes.used_cpu
    runtimes.used_disk
    runtimes.used_memory
    runtimes.reserved_memory

    total_users
    nats.latency.1m
    frameworks.apps
    frameworks.running_apps
    frameworks.started_apps
    frameworks.instances
    frameworks.running_instances
    frameworks.flapping_instances
    frameworks.missing_instances
    frameworks.started_instances
    frameworks.memory
    frameworks.started_memory
    frameworks.crashes
    runtimes.apps
    runtimes.running_apps
    runtimes.started_apps
    runtimes.instances
    runtimes.running_instances
    runtimes.flapping_instances
    runtimes.missing_instances
    runtimes.started_instances
    runtimes.memory
    runtimes.started_memory
    runtimes.crashes

    router.latency.1m
    router.requests
    router.responses

    system.load.1m
    system.cpu.user
    system.cpu.sys
    system.cpu.wait
    system.mem.percent
    system.mem.kb
    system.swap.percent
    system.swap.kb
    system.disk.system.percent
    system.disk.ephemeral.percent
    system.disk.persistent.percent
    system.healthy
SETVAR
    )

    $TSDB mkmetric $METRICS

    exec $TSDB tsd \
         --port=<%= properties.opentsdb.port %> \
         --staticroot=build/staticroot \
         --cachedir=$TSDTMP \
         >>$LOG_DIR/opentsdb.stdout.log \
         2>>$LOG_DIR/opentsdb.stderr.log

    ;;

  stop)
    kill_and_wait $PIDFILE
    rm -f $CLEANUP_SCRIPT

    ;;

  *)
    echo "Usage: opentsdb_ctl {start|stop}"

    ;;

esac
