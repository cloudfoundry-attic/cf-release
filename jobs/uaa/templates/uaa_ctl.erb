#!/bin/bash -e

export PATH=/var/vcap/packages/uaa/jdk/bin:$PATH
RUN_DIR=/var/vcap/sys/run/uaa
LOG_DIR=/var/vcap/sys/log/uaa
JOB_DIR=/var/vcap/jobs/uaa
PIDFILE=$RUN_DIR/uaa.pid

# Proxy configuration variable for the uaa
HTTP_PROXY_JAVA_OPTIONS=""

# Minimum strength for password
# TODO: move into correct properties file that is local to UAA war file only
UAA_OPTIONS="-Dpassword-policy.required-score=0"

<% if properties.env %>
# Proxy configuration
<% if properties.env.http_proxy %>
export HTTP_PROXY='<%= properties.env.http_proxy %>'
export http_proxy='<%= properties.env.http_proxy %>'
proxy_conf=(`echo $HTTP_PROXY | tr ":" " " | tr "\/" " "`)
HTTP_PROXY_JAVA_OPTIONS="$HTTP_PROXY_JAVA_OPTIONS -Dhttp.proxyHost=${proxy_conf[1]} -Dhttp.proxyPort=${proxy_conf[2]} "
<% end %>
<% if properties.env.https_proxy %>
export HTTPS_PROXY='<%= properties.env.https_proxy %>'
export https_proxy='<%= properties.env.https_proxy %>'
proxy_conf=(`echo $HTTPS_PROXY | tr ":" " " | tr "\/" " "`)
HTTP_PROXY_JAVA_OPTIONS="$HTTP_PROXY_JAVA_OPTIONS -Dhttps.proxyHost=${proxy_conf[1]} -Dhttps.proxyPort=${proxy_conf[2]} "
<% end %>
<% if properties.env.no_proxy %>
export NO_PROXY='<%= properties.env.no_proxy %>'
export no_proxy='<%= properties.env.no_proxy %>'
if [ x != x"$NO_PROXY" ]; then
  proxy_conf=`echo $NO_PROXY | sed -e 's/ //g'`

  OIFS=$IFS
  IFS=','
  for host in $proxy_conf; do
      if [[ $host == .* ]]; then
        host="*"$host
      fi
      java_no_proxies=$java_no_proxies"|"$host
  done
  IFS=$OIFS

  # Strip the leading '|'
  java_no_proxies=${java_no_proxies:1}
  HTTP_PROXY_JAVA_OPTIONS="$HTTP_PROXY_JAVA_OPTIONS -Dhttp.nonProxyHosts=\"$java_no_proxies\" "
fi
<% end %>
<% end %>

source /var/vcap/packages/common/utils.sh

case $1 in

  start)
    pid_guard $PIDFILE "UAA"

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR

    chown vcap:vcap $RUN_DIR
    chown -R vcap:vcap $LOG_DIR

    echo $$ > $PIDFILE
    chown vcap:vcap $PIDFILE

    <% if properties.uaa && properties.uaa.ldap &&  properties.uaa.ldap.sslCertificate %>
    /var/vcap/jobs/uaa/bin/install_crt ldap.crt ldapcert
    <% elsif properties.login && properties.login.ldap &&  properties.login.ldap.sslCertificate %>
    /var/vcap/jobs/uaa/bin/install_crt ldap.crt ldapcert
    <% end %>

    # Generate a random username and password for varz
    username=$RANDOM-$RANDOM-$RANDOM-$RANDOM
    password=$RANDOM-$RANDOM-$RANDOM-$RANDOM

    sed -i "s/_random_username_replaced_by_a_script_/${username}/g" $JOB_DIR/config/varz.yml
    sed -i "s/_random_password_replaced_by_a_script_/${password}/g" $JOB_DIR/config/varz.yml

    # We want to keep packages pristine, since tomcat is modified in place we stage it elsewhere.
    rm -rf /var/vcap/data/uaa
    mkdir -p /var/vcap/data/uaa
    cp -a /var/vcap/packages/uaa/tomcat /var/vcap/data/uaa
    cp -a /var/vcap/jobs/uaa/config/tomcat/* /var/vcap/data/uaa/tomcat/conf/

    export CLOUD_FOUNDRY_CONFIG_PATH=/var/vcap/jobs/uaa/config
    export JAVA_OPTS="-DPID=$$ -Dsun.net.inetaddr.ttl=60 -Dnetworkaddress.cache.ttl=60 $HTTP_PROXY_JAVA_OPTIONS $UAA_OPTIONS"
    export CATALINA_OPTS="<%= properties.uaa.catalina_opts %>"

    cd /var/vcap/data/uaa
    chown -R vcap:vcap /var/vcap/data/uaa
    exec chpst -u vcap:vcap tomcat/bin/catalina.sh run

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: uaa_ctl {start|stop}"

    ;;

esac
