---
name: uaa

description: "The UAA is the identity management service for Cloud Foundry. It's primary role is as an OAuth2 provider, issuing tokens for client applications to use when they act on behalf of Cloud Foundry users. It can also authenticate users with their Cloud Foundry credentials, and can act as an SSO service using those credentials (or others). It has endpoints for managing user accounts and for registering OAuth2 clients, as well as various other management functions."

templates:
  uaa_ctl.erb: bin/uaa_ctl
  cf-registrar_ctl: bin/uaa_cf-registrar_ctl
  install_crt.erb: bin/install_crt

  cf-registrar.config.yml.erb: config/cf-registrar/config.yml
  uaa.yml.erb: config/uaa.yml
  varz.yml.erb: config/varz.yml
  log4j.properties.erb: config/log4j.properties
  varz.log4j.properties.erb: config/varz.log4j.properties
  tomcat.logging.properties: config/tomcat/logging.properties
  tomcat.server.xml.erb: config/tomcat/server.xml
  ldap.crt.erb: config/ldap.crt
  login.yml.erb: config/login.yml
  messages.properties.erb: config/messages.properties


packages:
  - common
  - ruby
  - uaa

properties:
  uaa.admin.client_secret:
    description:
  uaa.authentication.policy.lockoutAfterFailures:
    description: "Number of allowed failures before account is locked"
  uaa.authentication.policy.countFailuresWithinSeconds:
    description: "Number of seconds in which lockoutAfterFailures failures must occur in order for account to be locked"
  uaa.authentication.policy.lockoutPeriodSeconds:
    description: "Number of seconds to lock out an account when lockoutAfterFailures failures is exceeded"
  uaa.batch.password:
    description: "Deprecated"
  uaa.batch.username:
    description: "Deprecated"
  uaa.catalina_opts:
    description:
    default: -Xmx768m -XX:MaxPermSize=256m
  uaa.cc.client_secret:
    description:
  uaa.cc.token_secret:
    description:
  uaa.client.autoapprove:
    description:
  uaa.user.authorities:
    description: 'Contains a list of the default authorities/scopes assigned to a user.'
    default:
      - openid
      - scim.me
      - cloud_controller.read
      - cloud_controller.write
      - cloud_controller_service_permissions.read
      - password.write
      - uaa.user
      - approvals.me
      - oauth.approvals
      - notification_preferences.read
      - notification_preferences.write
  uaa.openid.fallbackToAuthcode:
    description: When using the hybrid flow to get a id_token, suppress the exception if the client doesn't have the implicit grant.
    default: true
  uaa.clients:
    description:
  uaa.jwt.signing_key:
    description:
  uaa.jwt.verification_key:
    description:
  uaa.port:
    description: Port that uaa will accept connections on
    default: 8080
  uaa.scim.user:
    description:
  uaa.scim.user.override:
    description:
  uaa.scim.userids_enabled:
    description:
    default: false
  uaa.scim.users:
    description:
  uaa.scim.external_groups:
    description: "A list of external group mappings. Pipe delimited. A value may look as '- internal.read|cn=developers,ou=scopes,dc=test,dc=com'"
  ccdb.address:
    description: "The CloudController database IP address"
  ccdb.databases:
    description: "The list of databases used in CloudController database including tag/name"
  ccdb.db_scheme:
    description: "Database scheme for CloudController DB"
  ccdb.port:
    description: "The CloudController database Port"
  ccdb.roles:
    description: "The list of database Roles used in CloudController database including tag/name/password"
  domain:
    description: "The domain name for this CloudFoundry deploy"
  env.http_proxy:
    description: "The http_proxy accross the VMs"
  env.https_proxy:
    description: "The https_proxy accross the VMs"
  env.no_proxy:
    description: "Set No_Proxy accross the VMs"
  nats.password:
    description: "Password for NATS login"
  nats.port:
    description: "TCP port of NATS server"
  nats.user:
    description: "User name for NATS login"
  nats.machines:
    description: "IP of each NATS cluster member."
  networks.apps:
    description: "The App network name"
  uaadb.address:
    description: "The UAA database IP address"
  uaadb.databases:
    description: "The list of databases used in UAA database including tag/name"
  uaadb.db_scheme:
    description: "Database scheme for UAA DB"
  uaadb.port:
    description: "The UAA database Port"
  uaadb.roles:
    description: "The list of database Roles used in UAA database including tag/name/password"
  uaa.no_ssl:
    description: "when true, uaa uses http, otherwise it uses https"
    default: false
  uaa.url:
    description:
  uaa.dump_requests:
    description:
  uaa.login.client_secret:
    description: 'Deprecated. Default login client secret if no login client is defined'
  uaa.clients.login.secret:
    description: 'Login client secret - overrides uaa.login.client_secret'
  uaa.require_https:
    description:
  uaa_client_auth_credentials.password:
    description:
  uaa_client_auth_credentials.username:
    description:
  uaa.spring_profiles:
    description: "Deprecated. Use 'uaa.ldap.enabled'. Sets the Spring profiles on the UAA web application. This gets combined with the 'uaadb.db_scheme' property if and only if the value is exactly 'ldap' in order to setup the database, for example 'ldap,mysql'. If spring_profiles contains more than just 'ldap' it will be used to overwrite spring_profiles and db_scheme ignored. See uaa.yml.erb."
  uaa.ldap.enabled:
    description: "Set to true to enable LDAP"
    default: false
  uaa.ldap.profile_type:
    description: "The file to be used for configuring the LDAP authentication. options are simple-bind, search-and-bind and search-and-compare"
    default: search-and-bind
  uaa.ldap.url:
    description: "The URL to the ldap server, must start with ldap:// or ldaps://"
  uaa.ldap.userDNPattern:
    description: "Used with simple-bind only. A semi-colon separated lists of DN patterns to construct a DN direct from the user ID without performing a search."
  uaa.ldap.userDNPatternDelimiter:
    description: "The delimiter character in between user DN patterns for simple bind authentication"
    default: ";"
  uaa.ldap.userDN:
    description: "Used with search-and-bind and search-and-compare. A valid LDAP ID that has read permissions to perform a search of the LDAP tree for user information. "
  uaa.ldap.userPassword:
    description: "Used with search-and-bind and search-and-compare. Password for the LDAP ID that performs a search of the LDAP tree for user information."
  uaa.ldap.searchBase:
    description: "Used with search-and-bind and search-and-compare. Define a base where the search starts at."
    default: ""
  uaa.ldap.searchFilter:
    description: "Used with search-and-bind and search-and-compare. Search filter used. Takes one parameter, user ID defined as {0}"
    default: "cn={0}"
  uaa.ldap.passwordAttributeName:
    description: "Used with search-and-compare only. The name of the password attribute in the LDAP directory"
    default: "userPassword"
  uaa.ldap.localPasswordCompare:
    description: "Used with search-and-compare only. Set to true if passwords are retrieved by the search, and should be compared in the login server."
    default: "true"
  uaa.ldap.passwordEncoder:
    description: "Used with search-and-compare only. The encoder used to properly encode user password to match the one in the LDAP directory."
    default: "org.cloudfoundry.identity.uaa.ldap.DynamicPasswordComparator"
  uaa.ldap.sslCertificate:
    description: "Used with ldaps:// URLs. The certificate, if self signed, to be trusted by this connection."
  uaa.ldap.sslCertificateAlias:
    description: "Used with ldaps:// URLs. The certificate alias, to be trusted by this connection and stored in the keystore."
  uaa.ldap.mailAttributeName:
    description: "The name of the LDAP attribute that contains the users email address"
    default: mail
  uaa.ldap.mailSubstitute:
    description: "Defines an email pattern containing a {0} to generate an email address for an LDAP user during authentication"
    default: ''
  uaa.ldap.mailSubstituteOverridesLdap:
    description: "Set to true if you wish to override an LDAP user email address with a generated one"
    default: false
  uaa.ldap.groups.profile_type:
    description: "What type of group integration should be used. Values are no-groups, groups-as-scopes and groups-map-to-scopes"
    default: "no-groups"
  uaa.ldap.groups.autoAdd:
    description: "Set to true when profile_type=groups_as_scopes to auto create scopes for a user. Ignored for other profiles."
    default: "true"
  uaa.ldap.groups.searchBase:
    description: "Search start point for a user group membership search"
    default: ""
  uaa.ldap.groups.groupRoleAttribute:
    description: "Used with groups-as-scopes, defines the attribute that holds the scope name(s)."
  uaa.ldap.groups.groupSearchFilter:
    description: "Search query filter to find groups a user belongs to, or for a nested search, groups that a group belongs to"
    default: "member={0}"
  uaa.ldap.groups.searchSubtree:
    description: "Boolean value, set to true to search below the search base"
    default: "true"
  uaa.ldap.groups.maxSearchDepth:
    description: "Set to number of levels a nested group search should go. Set to 1 to disable nested groups (default)"
    default: "1"
  login.ldap.profile_type:
    description: "See uaa.ldap.profile_type - login.ldap prefix is used for backwards compatibility to enable ldap from login config"
  login.ldap.url:
    description: "See uaa.ldap.url - login.ldap prefix is used for backwards compatibility to enable ldap from login config"
  login.ldap.userDNPattern:
    description: "See uaa.ldap.userDNPattern - login.ldap prefix is used for backwards compatibility to enable ldap from login config"
  login.ldap.userDN:
    description: "See uaa.ldap.userDN - login.ldap prefix is used for backwards compatibility to enable ldap from login config"
  login.ldap.userPassword:
    description: "See uaa.ldap.userPassword - login.ldap prefix is used for backwards compatibility to enable ldap from login config"
  login.ldap.searchBase:
    description: "See uaa.ldap.searchBase - login.ldap prefix is used for backwards compatibility to enable ldap from login config"
    default: ""
  login.ldap.searchFilter:
    description: "See uaa.ldap.searchFilter - login.ldap prefix is used for backwards compatibility to enable ldap from login config"
    default: "cn={0}"
  login.ldap.passwordAttributeName:
    description: "See uaa.ldap.passwordAttributeName - login.ldap prefix is used for backwards compatibility to enable ldap from login config"
    default: "userPassword"
  login.ldap.localPasswordCompare:
    description: "See uaa.ldap.localPasswordCompare - login.ldap prefix is used for backwards compatibility to enable ldap from login config"
    default: "true"
  login.ldap.passwordEncoder:
    description: "See uaa.ldap.passwordEncoder - login.ldap prefix is used for backwards compatibility to enable ldap from login config"
    default: "org.cloudfoundry.identity.uaa.login.ldap.DynamicPasswordComparator"
  login.ldap.sslCertificate:
    description: "See uaa.ldap.sslCertificate - login.ldap prefix is used for backwards compatibility to enable ldap from login config"
  login.ldap.sslCertificateAlias:
    description: "See uaa.ldap.sslCertificateAlias - login.ldap prefix is used for backwards compatibility to enable ldap from login config"
  login.spring_profiles:
    description: "See uaa.spring_profiles - login.spring_profiles is used for backwards compatibility to enable ldap from login config"
  uaa.restricted_ips_regex:
    description: "A pipe delimited set of regular expressions of IP addresses that can reach the listening HTTP port of the server."
    default: 10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|169\.254\.\d{1,3}\.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3}|172\.1[6-9]{1}\.\d{1,3}\.\d{1,3}|172\.2[0-9]{1}\.\d{1,3}\.\d{1,3}|172\.3[0-1]{1}\.\d{1,3}\.\d{1,3}
  login.brand:
    description: "The brand to use for the reset password emails, available values are oss and pivotal"
    default: oss
  login.asset_base_url:
    description: "Base url for static assets, allows custom styling of the login server.  Use '/resources/pivotal' for Pivotal style."
  login.uaa_certificate:
    description: "Certificate to import if the UAA is using self-signed certificates"
  login.catalina_opts:
    description:
  login.notifications.url:
    description: "The url for the notifications service (configure to use Notifications Service instead of SMTP server)"
  login.smtp:
    description: "SMTP server configuration, for password reset emails etc."
  login.smtp.host:
    description: "SMTP server host address"
    default: localhost
  login.smtp.port:
    description: "SMTP server port"
    default: 2525
  login.smtp.user:
    description: "SMTP server username"
  login.smtp.password:
    description: "SMTP server password"
  login.links:
    description: "A hash of home/passwd/signup URLS (see commented examples below)"
  login.links.home:
    description: URL for primary console/dashboard for users
    default: https://console.run.pivotal.io
  login.links.passwd:
    description: URL for requesting password reset
    default: https://console.run.pivotal.io/password_resets/new
  login.links.signup:
    description: URL for requesting to signup/register for an account
    default: https://console.run.pivotal.io/register
  login.links.network:
    description: URL for Pivotal Network
    default: https://network.gopivotal.com/login
  login.links.signup-network:
    description: URL for requesting to signup/register for an account at Pivotal Network
    default: https://network.gopivotal.com/registrations/new
  login.tiles:
    description: "A list of links to other services to show on the landing page after logging in and/or signing up, depending on whether login-link and/or signup-link is specified."
  login.port:
    default: 8080
    description:
  login.uaa_base:
    description: "Location of the UAA."
  login.signups_enabled:
    description: "Enable account creation flow in the login server. Enabled by default."
  login.invitations_enabled:
    description: "Allows users to send invitations to email addresses outside the system and invite them to create an account. Disabled by default."
  login.saml.idpMetadataURL:
    description: "Deprecated: Use login.saml.providers list objects"
  login.saml.idp_metadata_file:
    description: "Deprecated: Use login.saml.providers list objects"
  login.saml.entityid:
    description: "The ID to represent this server"
  login.saml.idpEntityAlias:
    description: "Deprecated: Use login.saml.providers list objects"
  login.entity_id:
    description: "Deprecated: Use login.saml.entityid"
  login.saml.keystore_name:
    description: "Name of the SAML login server keystore."
    default: "samlKeystore.jks"
  login.saml.keystore_key:
    description: "Key name of the SAML login server keystore."
    default: "selfsigned"
  login.saml.keystore_password:
    description: "Key password to the SAML login server keystore."
    default: "password"
  login.saml.serviceProviderKey:
    description: "Private key for the service provider certificate."
  login.saml.serviceProviderKeyPassword:
    description: "Password to protect the service provider private key."
  login.saml.serviceProviderCertificate:
    description: "Service provider certificate."
  login.saml.assertion_consumer_index:
    description: "Deprecated: Use login.saml.providers list objects"
    default: 1
  login.saml.nameidFormat:
    description: "Deprecated: Use login.saml.providers list objects"
    default: "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"
  login.saml.metadataTrustCheck:
    description: "Deprecated: Use login.saml.providers list objects"
    default: true
  login.saml.providers:
    description: "Contains a hash of SAML Identity Providers, the key is the IDP Alias, followed by key/value pairs for idpMetadata, nameID, assertionConsumerIndex, metadataTrustCheck, showSamlLoginLink, linkText, iconUrl"
  login.saml.socket.connectionManagerTimeout:
    description: "Timeout in milliseconds for connection pooling for SAML metadata HTTP requests"
  login.saml.socket.soTimeout:
    description: "Read timeout in milliseconds for SAML metadata HTTP requests"
  login.analytics.code:
    description: "Analytics code"
  login.analytics.domain:
    description: "Analytics domain"
  login.messages:
    description: |
      A nested or flat hash of messages that the login server uses to display UI message
      This will be flattened into a java.util.Properties file. The example below will lead
      to four properties, where the key is the concatenated value delimited by dot, for example scope.tokens.read=message
      Nested example:
      messages:
        scope:
          tokens:
            read: View details of your approvals you have granted to this and other applications
            write: Cancel the approvals like this one that you have granted to this and other applications
          cloud_controller:
            read: View details of your applications and services
            write: Push applications to your account and create and bind services
      Flat example:
      messages:
        scope.tokens.read: View details of your approvals you have granted to this and other applications
        scope.tokens.write: Cancel the approvals like this one that you have granted to this and other applications
        scope.cloud_controller.read: View details of your applications and services
        scope.cloud_controller.write: Push applications to your account and create and bind services
