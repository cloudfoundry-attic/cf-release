---
name: login

<%
  config_artifacts_path = "/var/vcap/jobs/login/config/security"
%>

logging:
  config: /var/vcap/jobs/login/config/log4j.properties

<%
  # The login secret is defined in one of two properties
  # uaa.login.client_secret or uaa.clients.login.secret
  # If both of these are defined, then use the latter
  if properties.uaa && properties.uaa.clients && properties.uaa.clients.login && properties.uaa.clients.login.secret
    login_secret = properties.uaa.clients.login.secret
  elsif properties.uaa && properties.uaa.login && properties.uaa.login.client_secret
    login_secret = properties.uaa.login.client_secret
  else
    raise ArgumentError, 'uaa.login.client_secret or uaa.clients.login.secret must be set.'
  end
%>

<% protocol = (properties.login && properties.login.protocol) ? properties.login.protocol : "http" %>
<% if !properties.login || !properties.login.uaa_base
  # Fix this to https when SSL certs are working in dev and staging
  uaa_base = "#{protocol}://uaa.#{properties.domain}"
else
  uaa_base = properties.login.uaa_base
end %>
uaa:
  url: <%= uaa_base %>
  token:
    url: <%= uaa_base %>/oauth/token
  login:
    url: <%= uaa_base %>/authenticate
  clientinfo:
    url: <%= uaa_base %>/clientinfo
  approvals:
    url: <%= uaa_base %>/approvals
<% if properties.login and properties.login.links then %>
links: <% properties.login.links.marshal_dump.each do |id,url| %>
  <%= id %>: <%= url %><% end %>
<% end %>
<% if properties.login and properties.login.smtp then %>
smtp: <% properties.login.smtp.marshal_dump.each do |key,val| %>
  <%= key %>: <%= val %><% end %>
<% end %>
<% if properties.login and properties.login.tiles then %>
tiles: <% properties.login.tiles.each do |tile| %>
- <% tile.marshal_dump.each do |key,val| %><%= key %>: <%= val %>
  <% end %>
<% end %>
<% end %>

# The secret that this login server will use to authenticate to the uaa
LOGIN_SECRET: <%= login_secret %>
<% if !properties.uaa.require_https.nil? %>
require_https: <%= properties.uaa.require_https %>
<% end %>
<% if !properties.uaa.dump_requests.nil? %>
dump_requests: <%= properties.uaa.dump_requests %>
<% end %>

<% if properties.login && properties.login.asset_base_url %>
assetBaseUrl: <%= properties.login.asset_base_url %>
<% end %>

<% if properties.login.notifications && properties.login.notifications.url %>
notifications:
  url: <%= properties.login.notifications.url %>
<% end %>

login:
  brand: <%= (properties.login && properties.login.brand) ? properties.login.brand : "oss" %>
  url: <%= "#{protocol}://login.#{properties.domain}" %>
  entityBaseURL: <%= "#{protocol}://login.#{properties.domain}" %>
  entityID: <%= (properties.login && properties.login.saml.entityid) ? properties.login.saml.entityid : properties.login.entity_id ? properties.login.entity_id : "login.#{properties.domain}" %>
  <% if !properties.login.invitations_enabled.nil? %>
  invitationsEnabled: <%= properties.login.invitations_enabled %>
  <% end %>
<% if properties.login.saml %>
  <% if !properties.login.saml.serviceProviderCertificate.nil? %>
  serviceProviderCertificate: | 
    <%= p("login.saml.serviceProviderCertificate").gsub("\n", "\n    ")%>
  <% else %>
  serviceProviderCertificate: | 
    -----BEGIN CERTIFICATE-----
    MIIBzzCCATgCCQDTMCX3wJYrVDANBgkqhkiG9w0BAQUFADAsMSowKAYDVQQDFCFz
    YW1sX2xvZ2luLE9VPXRlc3QsTz12bXdhcmUsTz1jb20wHhcNMTMwNzAyMjMzOTU4
    WhcNMTQwNzAyMjMzOTU4WjAsMSowKAYDVQQDFCFzYW1sX2xvZ2luLE9VPXRlc3Qs
    Tz12bXdhcmUsTz1jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANYBRuep
    WaoNA7/RsOUVlmOzxbhtfW8AstGXjsWbAmmg8NSruRlNuMz1WdCeESM3zBqLSyp8
    Vf3j3ExzB2qquDbPXNA1k4EqgNya2E+6n3KsgVLCWQm4W46Pd7C6QswrR6JgUKaW
    6KI8BgyJQ9wjL/nR8uqZouJJyRSLuIaGXIuXAgMBAAEwDQYJKoZIhvcNAQEFBQAD
    gYEAXOojarkGv5nVZqTuY8BRM/TRt1oby3i0VRG70l0PcDlWft52aSvCd3t8ds2S
    h92cXLz8nvHEBaBTkxTLtf2/h5x2KQhXyHoU1UU+JjOegoF+LD6KdmaVk2l35Na5
    1V2AHsj+yDrJ9aKwt86jbBbcFkRphdkn5ivq71GCWRfcpZE=
    -----END CERTIFICATE-----
  <% end %>
  <% if !properties.login.saml.serviceProviderKey.nil? %>
  serviceProviderKey: | 
    <%= p("login.saml.serviceProviderKey").gsub("\n", "\n    ")%>
  <% else %>
  serviceProviderKey: | 
    -----BEGIN RSA PRIVATE KEY-----
    Proc-Type: 4,ENCRYPTED
    DEK-Info: DES-EDE3-CBC,231BD428AF94D4C8
    0Nmo90pX8byVS7ZlakMIoXdJSLlxqzi1pN0g1ye2U+9HgTLTLuMwWaPknZ/2NFtK
    rO72ss8uc7xBAoMkOvcMTZCg5P4JDlmuQ31IabzRyOQcAxCPZedgarRnwxT6GUim
    JtkzNPmAAgf1bfUTu/LNt2o01dW+qq+2qiwUxgUBM2xLBmadIWqqTOZbkFc9Xjvl
    /IEnJgp/c49sNh68EpXPlsGJfW7jAh90nlA13H1fpvTsSg2/6wKbRsxxNkpVg0Nq
    bQURQIO6htOLZBPMMpoPILp/KtKkd1zpaZJnbZGDo9AdwfAh9dUbEw8ukJwRg3Xl
    lsptHoMGsGdvgViWZhCB/pAHYLh31G8oVMA/qPB9PNJYIK2aQZdm7yiAdf+m8Jxb
    Do2xBH6XUeHkg2F0LWnC/FjaMRpLuliI9vvJVB7YCQKkMdgNVV0SCx39IiX0rEm5
    8vuuoAH3b7b+maWp5+ffriNIcEFSlcmTPIgqZBboIORBNXZnHTUG7nGIML+nlOK9
    zdvF2vAxchqOKroc6+SGFLNvNQd9S/nLH3vP+aX9iStL55G11+p2tL+bIGMWZj0h
    Z+qqQoogtngRFbjcVoKYerFXbKG6xXzXUc4O3EbvAKvEi0HJodYccP3L7wIer1aY
    VaMF2M05g5KedHosEfvvhU17xS9L4u2SRMZIQ3K8iLNEhZ6bOw6EnzTaKWeffrYr
    UOjfMEgswcHfpxx1iD5T4RTwxuKOgtFhd1QM4enXPsU6uRU5PGSiB/0t6jal6ClF
    PhtIrTwhx0vBR4rySx4raXdLClxxt5vLe826C3uwo/6HTdUsnDvIXA==
    -----END RSA PRIVATE KEY-----
  <% end %>
  serviceProviderKeyPassword: <%= properties.login.saml.serviceProviderKeyPassword ? properties.login.saml.serviceProviderKeyPassword : 'password' %>
  <% if !properties.login.self_service_links_enabled.nil? || !properties.login.signups_enabled.nil? %>
  selfServiceLinksEnabled: <%= properties.login.self_service_links_enabled.nil? ? properties.login.signups_enabled : properties.login.self_service_links_enabled %>
  <% end %>
  saml:
    signMetaData: <%= properties.login.saml.signMetaData %>
    signRequest: <%= properties.login.saml.signRequest %>
    providers: <% if properties.login.saml.providers then properties.login.saml.providers.marshal_dump.reject {|k,_| k.to_s == ''}.each do |idpAlias,idpProvider| %>
      <%= idpAlias %>: <% idpProvider.marshal_dump.reject {|k,_| ["idpMetadata", "idpMetadataXML", "idpMetadataURL"].include?(k.to_s)}.each do |key,value|%>
        <%= key %>: <%= value.is_a?(String) && value.match("\n") ? "| \n          " + value.gsub("\n", "\n          ") + "" : value %><% end %>
        idpMetadata: <%= (idpProvider.idpMetadataURL || idpProvider.idpMetadataXML || idpProvider.idpMetadata).inspect %><% end %><% end %><% if properties.login.saml.idpEntityAlias && (properties.login.saml.idpMetadataURL || properties.login.saml.idp_metadata_file) %>
      <%= properties.login.saml.idpEntityAlias %>: 
        idpMetadata: <%= properties.login.saml.idpMetadataURL ? properties.login.saml.idpMetadataURL : "/var/vcap/jobs/login/" + properties.login.saml.idp_metadata_file %>
        assertionConsumerIndex: <%= (properties.login && properties.login.saml.assertionConsumerIndex) ? properties.login.saml.assertionConsumerIndex : 1 %>
        nameID: <%= (properties.login && properties.login.saml.nameidFormat) ? properties.login.saml.nameidFormat : "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress" %>
        metadataTrustCheck: <%= (properties.login.saml.metadataTrustCheck ? properties.login.saml.metadataTrustCheck : true) %>
        showSamlLoginLink: true
        linkText: 'Use your corporate credentials'
    <% end %>
    socket:
      connectionManagerTimeout: <%= properties.login.saml.socket.connectionManagerTimeout.nil? ? 10000 : properties.login.saml.socket.connectionManagerTimeout %>
      soTimeout: <%= properties.login.saml.socket.soTimeout.nil? ? 10000 : properties.login.saml.socket.soTimeout %>
<% end %>
  authorize:
    url: <%= "#{protocol}://login.#{properties.domain}/oauth/authorize" %>
    
<% if properties.login.analytics && properties.login.analytics.code && properties.login.analytics.domain %>
analytics:
  code: <%= properties.login.analytics.code %>
  domain: <%= properties.login.analytics.domain %>
<% end %>
