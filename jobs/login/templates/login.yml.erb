---
name: login

<%
  config_artifacts_path = "/var/vcap/jobs/login/config/security"
%>

logging:
  config: /var/vcap/jobs/login/config/log4j.properties

<% protocol = (properties.login && properties.login.protocol) ? properties.login.protocol : "http" %>
<% if !properties.login || !properties.login.uaa_base
  # Fix this to https when SSL certs are working in dev and staging
  uaa_base = "#{protocol}://uaa.#{properties.domain}"
else
  uaa_base = properties.login.uaa_base
end %>
uaa:
  url: <%= uaa_base %>
  token:
    url: <%= uaa_base %>/oauth/token
  login:
    url: <%= uaa_base %>/authenticate
  clientinfo:
    url: <%= uaa_base %>/clientinfo
  approvals:
    url: <%= uaa_base %>/approvals
<% if properties.login and properties.login.links then %>
links: <% properties.login.links.marshal_dump.each do |id,url| %>
  <%= id %>: <%= url %><% end %>
<% end %>
<% if properties.login and properties.login.smtp then %>
smtp: <% properties.login.smtp.marshal_dump.each do |key,val| %>
  <%= key %>: <%= val %><% end %>
<% end %>
<% if properties.login and properties.login.tiles then %>
tiles: <% properties.login.tiles.each do |tile| %>
- <% tile.marshal_dump.each do |key,val| %><%= key %>: <%= val %>
  <% end %>
<% end %>
<% end %>

# The secret that this login server will use to authenticate to the uaa
<% if !properties.uaa.clients || !properties.uaa.clients.login %>
LOGIN_SECRET: <%= properties.uaa.login.client_secret %>
<% else %>
LOGIN_SECRET: <%= properties.uaa.clients.login.secret %>
<% end %>
<% if !properties.uaa.require_https.nil? %>
require_https: <%= properties.uaa.require_https %>
<% end %>
<% if !properties.uaa.dump_requests.nil? %>
dump_requests: <%= properties.uaa.dump_requests %>
<% end %>

login:
  brand: <%= (properties.login && properties.login.brand) ? properties.login.brand : "oss" %>
  
  url: <%= "#{protocol}://login.#{properties.domain}" %>
  # The entity base url is the location of this application
  # (The host and port of the application that will accept assertions)
  entityBaseURL: <%= "#{protocol}://login.#{properties.domain}" %>
  # The entityID of this SP
  entityID: <%= (properties.login && properties.login.saml.entityid) ? properties.login.saml.entityid : "login.#{properties.domain}" %>
<% if properties.login.saml %>
  # The entity alias of the IDP
  idpEntityAlias: <%= properties.login.saml.idpEntityAlias ? properties.login.saml.idpEntityAlias : "vsphere.local" %>
  <% if !properties.login.saml.idpMetadataURL.nil? %>
  idpMetadataURL: <%= properties.login.saml.idpMetadataURL %>
  <% end %>
  <% if !properties.login.saml.idp_metadata_file.nil? %>
  idpMetadataFile: /var/vcap/jobs/login/<%= properties.login.saml.idp_metadata_file %>
  <% end %>
  <% if !properties.login.saml.serviceProviderCertificate.nil? %>
  serviceProviderCertificate: ! <%= "'" + p("login.saml.serviceProviderCertificate").gsub("\n", "\n\n    ") + "'" %>
  <% end %>
  <% if !properties.login.saml.serviceProviderKey.nil? %>
  serviceProviderKey: ! <%= "'" + p("login.saml.serviceProviderKey").gsub("\n", "\n\n    ") + "'" %>
  <% end %>
  <% if !properties.login.saml.serviceProviderKeyPassword.nil? %>
  serviceProviderKeyPassword: <%= properties.login.saml.serviceProviderKeyPassword %>
  <% end %>
  saml:
    assertionConsumerIndex: <%= (properties.login && properties.login.saml.assertionConsumerIndex) ? properties.login.saml.assertionConsumerIndex : 1 %>
    nameID: <%= (properties.login && properties.login.saml.nameidFormat) ? properties.login.saml.nameidFormat : "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress" %>

<% end %>
  authorize:
    url: <%= "#{protocol}://login.#{properties.domain}/oauth/authorize" %>

    
<% if properties.login.analytics && properties.login.analytics.code && properties.login.analytics.domain %>
analytics:
  code: <%= properties.login.analytics.code %>
  domain: <%= properties.login.analytics.domain %>
<% end %>


<% if properties.login && properties.login.spring_profiles %>
spring_profiles: <%= properties.login.spring_profiles %>
<% end %>
