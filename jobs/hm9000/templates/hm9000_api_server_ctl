#!/bin/bash

RUN_DIR=/var/vcap/sys/run/hm9000
LOG_DIR=/var/vcap/sys/log/hm9000
PIDFILE=$RUN_DIR/hm9000_api_server.pid

source /var/vcap/packages/common/utils.sh

case $1 in

  start)
    pid_guard $PIDFILE "hm9000_api_server"

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR

    chown -R vcap:vcap $RUN_DIR
    chown -R vcap:vcap $LOG_DIR

    echo $$ > $PIDFILE

    if running_in_container; then
        echo "Not setting /proc/sys/net/ipv4 parameters, since I'm running inside a linux container"
    else
        # TCP_FIN_TIMEOUT
        # This setting determines the time that must elapse before TCP/IP can release a closed connection and reuse
        # its resources. During this TIME_WAIT state, reopening the connection to the client costs less than establishing
        # a new connection. By reducing the value of this entry, TCP/IP can release closed connections faster, making more
        # resources available for new connections. Addjust this in the presense of many connections sitting in the
        # TIME_WAIT state:

        echo 10 > /proc/sys/net/ipv4/tcp_fin_timeout

        # TCP_TW_REUSE
        # This allows reusing sockets in TIME_WAIT state for new connections when it is safe from protocol viewpoint.
        # Default value is 0 (disabled). It is generally a safer alternative to tcp_tw_recycle

        echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse
    fi

    # Allowed number of open file descriptors
    ulimit -n 100000

    exec chpst -u vcap:vcap /var/vcap/packages/hm9000/hm9000 \
        serve_api \
        --config=/var/vcap/jobs/hm9000/config/hm9000.json

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: hm9000_api_server_ctl {start|stop}"

    ;;

esac
