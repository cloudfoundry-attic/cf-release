<%
  def discover_external_ip
    networks = spec.networks.marshal_dump

    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end

    if !network
      _, network = networks.first
    end

    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end

    network.ip
  end
%>
{
    "heartbeat_period_in_seconds": <%= p("dea_next.heartbeat_interval_in_seconds") %>,

    "cc_auth_user": "<%= p("cc.bulk_api_user") %>",
    "cc_auth_password": "<%= p("cc.bulk_api_password") %>",
    "cc_base_url": "<%= p("cc.srv_api_uri") %>",
    "skip_cert_verify": <%= p("ssl.skip_cert_verify") %>,
    "desired_state_batch_size": <%= p("hm9000.desired_state_batch_size") %>,
    "fetcher_network_timeout_in_seconds": <%= p("hm9000.fetcher_network_timeout_in_seconds") %>,
    "sender_message_limit": <%= p("hm9000.sender_message_limit") %>,

    "store_schema_version": 4,
    "store_urls": [<%= p("etcd.machines").map{|addr| "\"http://#{addr}:4001\""}.join(",")%>],

    "metrics_server_port": 0,
    "metrics_server_user": "",
    "metrics_server_password": "",

    "log_level": "INFO",
    "log_directory": "/var/vcap/sys/log/hm9000",

    "api_server_url": "<%= p("hm9000.url", "https://hm9000.#{p("domain")}") %>",
    "api_server_address": "<%= discover_external_ip %>",
    "api_server_port": <%= p("hm9000.port") %>,
    "api_server_username": "<%= p("cc.internal_api_user") %>",
    "api_server_password": "<%= p("cc.internal_api_password") %>",

    "nats": <%=
  p("nats.machines").collect do |addr|
    {
      "host" => addr,
      "port" => p("nats.port"),
      "user" => p("nats.user"),
      "password" => p("nats.password")
    }
  end.to_json
%>
}
