#!/bin/bash

RUN_DIR=/var/vcap/sys/run/narc
LOG_DIR=/var/vcap/sys/log/narc
PIDFILE=$RUN_DIR/narc.pid

source /var/vcap/packages/common/utils.sh

case $1 in

  start)
    pid_guard $PIDFILE "narc"

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR

    chown -R vcap:vcap $RUN_DIR
    chown -R vcap:vcap $LOG_DIR

    echo $$ > $PIDFILE

    <% if p("dea_next.kernel_network_tuning_enabled") == true %>
    # TCP_FIN_TIMEOUT
    # This setting determines the time that must elapse before TCP/IP can release a closed connection and reuse
    # its resources. During this TIME_WAIT state, reopening the connection to the client costs less than establishing
    # a new connection. By reducing the value of this entry, TCP/IP can release closed connections faster, making more
    # resources available for new connections. Addjust this in the presense of many connections sitting in the
    # TIME_WAIT state:

    echo 5 > /proc/sys/net/ipv4/tcp_fin_timeout

    # TCP_TW_RECYCLE
    # It enables fast recycling of TIME_WAIT sockets. The default value is 0 (disabled). The sysctl documentation
    # incorrectly states the default as enabled. It can be changed to 1 (enabled) in many cases. Known to cause some
    # issues with hoststated (load balancing and fail over) if enabled, should be used with caution.

    echo 1 > /proc/sys/net/ipv4/tcp_tw_recycle

    # TCP_TW_REUSE
    # This allows reusing sockets in TIME_WAIT state for new connections when it is safe from protocol viewpoint.
    # Default value is 0 (disabled). It is generally a safer alternative to tcp_tw_recycle

    echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse
    <% end %>

    exec /var/vcap/packages/narc/bin/narc \
         -config="/var/vcap/jobs/narc/config/narc.yml" \
         1>>$LOG_DIR/narc.stdout.log \
         2>>$LOG_DIR/narc.stderr.log

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: narc_ctl {start|stop}"

    ;;

esac
