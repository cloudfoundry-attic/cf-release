---
<%
  # query a path in properties, with a fallbac
  def q(path, default)
    here = find("properties")
    path.split(".").each do |step|
      return default unless here.key?(step)
      here = here[step]
    end

    here
  end

  # Add admin user with random password if it's not already there.
  # block is require to keep existing ccdb admin  and services password, or make a unique one.
  users = q("uaa.scim.users", [])
  admin_user = users.detect { |u| u.match("^admin\\|") }
  services_user = users.detect { |u| u.match("^services\\|") }
  users.unshift "admin|#{random_string 12, :admin}|scim.write,scim.read,openid,cloud_controller.admin" unless admin_user
  users << "services|#{random_string 12, :services}|scim.write,scim.read,openid,cloud_controller.admin" unless services_user
  services_userid, services_password = services_user.split("\|")[0..1] if services_user

  def production?
    find("name") == "cf-cfapps-io"
  end

  ec2_memory = {
    "m1.medium" => 3_840,
    "m1.large" => 7_680,
    "m2.2xlarge" => 35_020
  }
  ec2_disk = {
    "m1.medium" => 390_000,
    "m1.large" => 400_000,
    "m2.2xlarge" => 800_000
  }

  # reserving static_ip range for cloud_controller jobs
  # saving each one so it is possible to grep the file for reserved ips
  cloud_controller_static_ips = []
  cloud_controller_static_ips << ip(3, 'cf1.static')
  cloud_controller_static_ips << ip(4, 'cf1.static')
  cloud_controller_static_ips << ip(8, 'cf1.static')
  cloud_controller_static_ips << ip(9, 'cf1.static')
  cloud_controller_static_ips << ip(10, 'cf1.static')
  cloud_controller_static_ips << ip(11, 'cf1.static')
  cloud_controller_static_ips << ip(12, 'cf1.static')
  cloud_controller_static_ips << ip(13, 'cf1.static')
  cloud_controller_static_ips << ip(14, 'cf1.static')

  uaa_static_ips = []
  uaa_static_ips << ip(2, 'cf1.static')
  uaa_static_ips << ip(7, 'cf1.static')

  router_static_ips = []
  router_static_ips << ip(5, 'cf1.static')
  router_static_ips << ip(6, 'cf1.static')
  router_static_ips << ip(15, 'cf1.static')
  router_static_ips << ip(16, 'cf1.static')
  router_static_ips << ip(17, 'cf1.static')
  router_static_ips << ip(18, 'cf1.static')
  router_static_ips << ip(19, 'cf1.static')
  router_static_ips << ip(20, 'cf1.static')

  # TODO: this probably doesn't need its own static IP
  loggregator_static_ip = ip(21, "cf1.static")
-%>

# ENV variables for Yeti:
# $ export SERVICE_BROKER_URL=http://service-broker.<%= find("properties.domain") %>
# $ export SERVICE_BROKER_TOKEN=broker-token

name: <%= find("name") %>
director_uuid: <%= find("director_uuid") %>

releases:
- name: <%= find("releases")[0]["name"] %>
  version: latest

compilation:
  workers: 6
  network: cf1
  reuse_compilation_vms: true
  cloud_properties:
    instance_type: c1.medium
    availability_zone: <%= find('properties.template_only.aws.availability_zone') %>

update:
  canaries: 1
  canary_watch_time: 30000-600000
  update_watch_time: 30000-600000
  max_in_flight: 1
  max_errors: 1

networks:
- name: cf1
  type: manual
  subnets:
  - range: 10.10.16.0/20
    name: default_unused
    reserved:
    - 10.10.16.2 - 10.10.16.9
    - 10.10.16.255 - 10.10.16.255
    static:
    - 10.10.16.10 - 10.10.16.254
    gateway: 10.10.16.1
    dns:
    - 10.10.0.2  # amazon has only 1 DNS server for the whole VPC at x.x.0.2
    cloud_properties:
      security_groups:
      - cf
      subnet: <%= find('properties.template_only.aws.subnet_ids.cf1') %>

resource_pools:
- name: small
  network: cf1
  size: <%= production? ? 1 : 2 %>
  stemcell:
    name: bosh-stemcell
    version: latest
  cloud_properties:
    instance_type: m1.small
    availability_zone: <%= find('properties.template_only.aws.availability_zone') %>
- name: medium
  network: cf1
  size: 4
  stemcell:
    name: bosh-stemcell
    version: latest
  cloud_properties:
    instance_type: m1.medium
    availability_zone: <%= find('properties.template_only.aws.availability_zone') %>
- name: large
  network: cf1
  size: <%= find('jobs.cloud_controller.instances').to_i + find('jobs.uaa.instances').to_i %>
  stemcell:
    name: bosh-stemcell
    version: latest
  cloud_properties:
    instance_type: m1.medium
    availability_zone: <%= find('properties.template_only.aws.availability_zone') %>
- name: dea
  network: cf1
  size: <%= find('resource_pools.dea.size') %>
  stemcell:
    name: bosh-stemcell
    version: latest
  cloud_properties:
<% if production? -%>
    instance_type: <%= find('resource_pools.dea.cloud_properties.instance_type') %>
<% else -%>
    instance_type: m1.large
<% end -%>
    availability_zone: <%= find('properties.template_only.aws.availability_zone') %>
- name: router
  network: cf1
  size: <%= find('jobs.router.instances') %>
  stemcell:
    name: bosh-stemcell
    version: latest
  cloud_properties:
    instance_type: m1.small
    availability_zone: <%= find('properties.template_only.aws.availability_zone') %>
    elbs:
<% if production? -%>
  <% find('resource_pools.router.cloud_properties.elbs').each do |elb|  -%>
  - <%= elb %>
  <% end -%>
<% else -%>
    - cfrouter
<% end -%>

jobs:
- name: syslog_aggregator
  template: syslog_aggregator
  instances: 1
  resource_pool: medium
<% if production? -%>
  persistent_disk: 500000
<% else -%>
  persistent_disk: 100000
<% end -%>

  networks:
  - name: cf1
    static_ips:
    - <%= ip(0, 'cf1.static') %>

- name: nats
  template: nats
  instances: 1
  resource_pool: medium
  networks:
  - name: cf1
    static_ips:
    - <%= ip(1, 'cf1.static') %>

- name: uaa
  template: uaa
  instances: <%= find('jobs.uaa.instances') %>
  resource_pool: large
  networks:
  - name: cf1
    static_ips:
<% (0..(find('jobs.uaa.instances').to_i - 1)).each do |i| -%>
    - <%= uaa_static_ips[i] %>
<% end -%>

- name: login
  template: login
  instances: 1
  resource_pool: medium
  networks:
  - name: cf1

- name: cloud_controller
  template: cloud_controller_ng
  instances: <%= find('jobs.cloud_controller.instances') %>
  resource_pool: large
  networks:
  - name: cf1
    static_ips:
<% (0..(find('jobs.cloud_controller.instances').to_i - 1)).each do |i| -%>
    - <%= cloud_controller_static_ips[i] %>
<% end -%>
  properties:
    ccdb: ccdb

- name: health_manager
  template: health_manager_next
  instances: 1
  resource_pool: medium
  networks:
  - name: cf1

- name: dea_next
<% if production? -%>
  template: dea_next
<% else -%>
  template:
  - dea_next
  - dea_logging_agent
<% end -%>
  instances: <%= find('jobs.dea_next.instances') %>
  update:
    max_in_flight: <%= q("dea.update.max_in_flight", 1) %>
  resource_pool: dea
  networks:
  - name: cf1
    default:
    - dns
    - gateway
  properties:
    dea_next:
      stacks:
      - lucid64

- name: collector
  template: collector
  instances: 1
  resource_pool: small
  networks:
  - name: cf1

<% unless production? -%>
- name: loggregator
  template: loggregator
  instances: 1
  resource_pool: small
  networks:
  - name: cf1
    static_ips:
    - <%= loggregator_static_ip %>
<% end -%>

- name: router
  template: gorouter
  instances: <%= find('jobs.router.instances') %>
  resource_pool: router
  networks:
  - name: cf1
    default:
    - dns
    - gateway
    static_ips:
<% (0..(find('jobs.router.instances').to_i - 1)).each do |i| -%>
    - <%= router_static_ips[i] %>
<% end -%>

properties:
  template_only:
    <%= find("properties.template_only").to_yaml.split("\n")[1..-1].map{|line| " " * 4 + line}.join("\n").gsub(/\A\s{4}/, "") %>

  domain: <%= find("properties.domain") %>
  system_domain: <%= q("system_domain", find("properties.domain")) %>
  system_domain_organization: <%= q("system_domain_organization", "").inspect %>
  app_domains:
<% app_domains = q("app_domains", q("domain", [])) -%>
<% Array(app_domains).each do |domain| -%>
  - <%= domain %>
<% end -%>


  networks:
    apps: cf1
    management: cf1

  nats:
    user: <%= find("properties.nats.user") %>
    password: <%= find("properties.nats.password") %>
    address: 10.10.16.11  # <%#= ip( 1, 'cf1.static') %>
    port: 4222
    authorization_timeout: 5  # AWS is slow

  ccdb: &ccdb
    <%= find("properties.ccdb").to_yaml.split("\n")[1..-1].map{|line| " " * 4 + line}.join("\n").gsub(/\A\s{4}/, "") %>

  ccdb_ng: *ccdb

  uaadb:
    db_scheme: mysql
    address: <%= find("properties.uaadb.address") %>
    port: 3306
    roles:
<% find("properties.uaadb.roles").each do |role| -%>
    - tag: <%= role["tag"] %>
      name: <%= role["name"] %>
      password: <%= role["password"] %>
<% end -%>
    databases:
<% find("properties.uaadb.databases").each do |db| -%>
    - tag: <%= db["tag"] %>
      name: <%= db["name"] %>
<% end -%>


  cc_api_version: v2   # used by at least service-broker

  cc: &cc
    srv_api_uri: https://ccng.<%= find("properties.domain") %>
    external_host: ccng
    logging_level: debug
    bulk_api_password: <%= find("properties.cc.bulk_api_password") %>
    uaa_resource_id: cloud_controller
    staging_upload_user: <%= find("properties.cc.staging_upload_user") %>
    staging_upload_password: <%= find("properties.cc.staging_upload_password") %>
    max_staging_runtime: 900
    resource_pool:
      minimum_size: 65536
      resource_directory_key: <%= q("cc.resource_pool.resource_directory_key", "#{find("properties.domain").gsub(".", "-")}-cc-resources") %>
      fog_connection:
        provider: AWS
        aws_access_key_id: <%= find("properties.template_only.aws.access_key_id") %>
        aws_secret_access_key: <%= find("properties.template_only.aws.secret_access_key") %>
      cdn:
        uri: <%= q("cc.resource_pool.cdn.uri", "") %>
        key_pair_id: <%= q("cc.resource_pool.cdn.key_pair_id", "") %>
        private_key: <%= q("cc.resource_pool.cdn.private_key", "").inspect %>
    packages:
      minimum_size: 1048576
      app_package_directory_key: <%= q("cc.packages.app_package_directory_key", "#{find("properties.domain").gsub(".", "-")}-cc-packages") %>
      fog_connection:
        provider: AWS
        aws_access_key_id: <%= find("properties.template_only.aws.access_key_id") %>
        aws_secret_access_key: <%= find("properties.template_only.aws.secret_access_key") %>
      cdn:
        uri: <%= q("cc.packages.cdn.uri", "") %>
        key_pair_id: <%= q("cc.packages.cdn.key_pair_id", "") %>
        private_key: <%= q("cc.packages.cdn.private_key", "").inspect %>
    droplets:
      minimum_size: 1048576
      droplet_directory_key: <%= q("cc.droplets.droplet_directory_key", "#{find("properties.domain").gsub(".", "-")}-cc-droplets") %>
      fog_connection:
        provider: AWS
        aws_access_key_id: <%= find("properties.template_only.aws.access_key_id") %>
        aws_secret_access_key: <%= find("properties.template_only.aws.secret_access_key") %>
      cdn:
        uri: <%= q("cc.droplets.cdn.uri", "") %>
        key_pair_id: <%= q("cc.droplets.cdn.key_pair_id", "") %>
        private_key: <%= q("cc.droplets.cdn.private_key", "").inspect %>
    cc_partition: default
    quota_definitions:
      free:
        memory_limit: 0
        total_services: 0
      paid:
        memory_limit: 10240
        total_services: -1
      runaway:
        memory_limit: 102400
        total_services: -1
    stacks:
    - name: lucid64
      description: "Ubuntu 10.04"
    - name: lucid64custom
      description: "Fake Ubuntu 10.04"
    db_encryption_key: <%= find("properties.cc.db_encryption_key") %>

  ccng: *cc

  router:
    port: 8081
    status:
      port: 8080
      user: <%= find("properties.router.status.user") %>
      password: <%= find("properties.router.status.password") %>

  dea:
    max_memory: 4096

  dea_next:
<% if production? -%>
    memory_mb: <%= ec2_memory.fetch("m2.2xlarge") - 2_048 %>
    memory_overcommit_factor: 1
    disk_mb: <%= ec2_disk.fetch("m2.2xlarge") %>
    disk_overcommit_factor: 1
    num_instances: 256
<% else -%>
    memory_mb: <%= ec2_memory.fetch("m1.large") - 1_024 %>
    memory_overcommit_factor: 3
    disk_mb: <%= ec2_disk.fetch("m1.large") %>
    disk_overcommit_factor: 2
    num_instances: 256
<% end -%>
    deny_networks:
    - 169.254.0.0/16 # aws status endpoint
    - 10.10.0.0/24 # bosh network
    - 10.10.16.0/20 # cf network
    allow_networks:
    - 10.10.0.2/32 # Amazon DNS server
    - 10.10.17.0/24 # DEAs

  syslog_aggregator:
    address: 10.10.16.10
    port: 54321
    log_email:
      enabled: true
      from_email: <%= find("properties.syslog_aggregator.log_email.from_email") %>
      from_password: <%= find("properties.syslog_aggregator.log_email.from_password") %>
      to_email:
      - cfpi-backend@googlegroups.com
      - cfpi-services@googlegroups.com
      smtp_server: smtp.gmail.com
      smtp_port: 587
      smtp_domain: gmail.com

<% unless production? -%>
  loggregator:
    server: <%= loggregator_static_ip %>:3456
    status:
      user: <%= find("properties.loggregator.status.user") %>
      password: <%= find("properties.loggregator.status.password") %>
      port: 5768
<% end -%>

  login:
    protocol: https
    links:
      home: <%= q("login.links.home", "https://console.#{find("properties.domain")}") %>
      passwd: <%= q("login.links.passwd", "https://console.#{find("properties.domain")}/password_resets/new") %>
      signup: <%= q("login.links.signup", "https://console.#{find("properties.domain")}/register") %>

  uaa:
    catalina_opts: -Xmx768m -XX:MaxPermSize=256m
    url: https://uaa.<%= find("properties.domain") %>
    resource_id: account_manager
    no_ssl: false
    jwt:
      signing_key: <%= find("properties.uaa.jwt.signing_key").inspect %>
      verification_key: <%= find("properties.uaa.jwt.verification_key").inspect %>
    cc:
      client_secret: <%= find("properties.uaa.cc.client_secret").inspect %>
    admin:
      client_secret: <%= find("properties.uaa.admin.client_secret").inspect %>
    batch:
      username: <%= find("properties.uaa.batch.username").inspect %>
      password: <%= find("properties.uaa.batch.password").inspect %>
    client:
      autoapprove:
        - cf
        - vmc
        - my
        - portal
        - micro
        - support-signon
        - login
    clients:
      login:
        override: true
        scope: openid
        authorities: oauth.login
        secret: <%= find("properties.uaa.clients.login.secret") %>
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        redirect-uri: https://login.<%= find("properties.domain") %>
      portal:
        override: true
        scope: openid,cloud_controller.read,cloud_controller.write,password.write
        authorities: scim.write,scim.read,cloud_controller.read,cloud_controller.write,password.write,uaa.admin,uaa.resource,cloud_controller.admin,billing.admin
        secret: <%= find("properties.uaa.clients.portal.secret") %>
        authorized-grant-types: authorization_code,client_credentials
        access-token-validity: 1209600
        refresh-token-validity: 1209600
      billing:
        override: true
        scope: uaa.none
        authorities: cloud_controller.read,cloud_controller.write,cloud_controller.admin,uaa.resource,scim.read,scim.write
        secret: <%= find("properties.uaa.clients.billing.secret") %>
        authorized-grant-types: client_credentials
        access-token-validity: 1209600
        refresh-token-validity: 1209600
      app-direct:
        override: true
        authorities: app_direct_invoice.write
        secret: <%= find("properties.uaa.clients.app-direct.secret") %>
        authorized-grant-types: authorization_code,client_credentials,password,refresh_token,implicit
        access-token-validity: 1209600
        refresh-token-validity: 1209600
        redirect-uri: <%= q("login.links.home", "https://console.#{find("properties.domain")}") %>
      support-services:
        scope: scim.write,scim.read,openid,cloud_controller.read,cloud_controller.write
        secret: <%= find("properties.uaa.clients.support-services.secret") %>
        authorized-grant-types: authorization_code,client_credentials
        redirect-uri: http://support-signon.<%= find("properties.domain") %>
        authorities: portal.users.read
        access-token-validity: 1209600
        refresh-token-validity: 1209600
      vmc:
        override: true
        authorized-grant-types: password,implicit
        authorities: uaa.none
        scope: cloud_controller.read,cloud_controller.write,openid,password.write,cloud_controller.admin,scim.read,scim.write
      cf:
        override: true
        authorized-grant-types: implicit,password,refresh_token
        authorities: uaa.none
        scope: cloud_controller.read,cloud_controller.write,openid,password.write,cloud_controller.admin,scim.read,scim.write
      servicesmgmt:
        secret: <%= find("properties.uaa.clients.servicesmgmt.secret") %>
        scope: openid,cloud_controller.read,cloud_controller.write
        authorities: uaa.resource,oauth.service,clients.read,clients.write,clients.secret
        authorized-grant-types: authorization_code,client_credentials,password,implicit
        redirect-uri: http://servicesmgmt.<%= find("properties.domain") %>/auth/cloudfoundry/callback
        override: true
        autoapprove: true
      space-mail:
        override: true
        authorities: scim.read,scim.write,cloud_controller.admin
        secret: <%= find("properties.uaa.clients.space-mail.secret") %>
        authorized-grant-types: client_credentials
        access-token-validity: 1209600
        refresh-token-validity: 1209600

    scim:
      users:
<% users.each do |u| -%>
      - <%= u %>
<% end -%>
  collector:
    use_datadog: true
    datadog_api_key: <%= find('properties.template_only.datadog.datadog_api_key') %>
    datadog_application_key: <%= find('properties.template_only.datadog.datadog_application_key') %>
    deployment_name: <%= find("name") %>
