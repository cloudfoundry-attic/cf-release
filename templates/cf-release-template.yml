name: (( merge ))
director_uuid: (( merge ))
releases: (( merge ))

meta:
  stemcell:
    name: bosh-stemcell
    version: latest

  zones:
    primary: (( properties.template_only.aws.availability_zone ))
    secondary: (( properties.template_only.aws.availability_zone2 ))

  networks:
    z1:
      apps: cf1
      management: cf1

    z2:
      apps: cf2
      management: cf2

  syslog:
    z1:
      address: (( jobs.logs_z1.networks.cf1.static_ips.[0] ))
      port: 54321
    z2:
      address: (( jobs.logs_z2.networks.cf2.static_ips.[0] ))
      port: 54321

  instance_sizes:
    memory:
      m1_medium: 3840
      m1_large: 7680
      m2_2xlarge: 35020
    disk:
      m1_medium: 410000
      m1_large: 420000
      m2_2xlarge: 850000

compilation:
  workers: 6
  network: cf1
  reuse_compilation_vms: true
  cloud_properties:
    instance_type: c1.medium
    availability_zone: (( meta.zones.primary ))

update:
  canaries: 1
  max_in_flight: 1
  canary_watch_time: 5000-600000
  update_watch_time: 5000-600000

networks:
  - name: cf1
    type: manual
    subnets:
      - range: 10.10.16.0/20
        name: default_unused
        reserved:
          - 10.10.16.2 - 10.10.16.9
        static:
          - 10.10.16.10 - 10.10.16.255
        gateway: 10.10.16.1
        dns:
          - 10.10.0.2 # amazon has only 1 DNS server for the whole VPC at x.x.0.2
        cloud_properties:
          security_groups:
            - cf
          subnet: (( properties.template_only.aws.subnet_ids.cf1 ))

  - name: cf2
    type: manual
    subnets:
      - range: 10.10.80.0/20
        name: default_unused
        reserved:
          - 10.10.80.2 - 10.10.80.9
        static:
          - 10.10.80.10 - 10.10.80.255
        gateway: 10.10.80.1
        dns:
          - 10.10.0.2 # amazon has only 1 DNS server for the whole VPC at x.x.0.2
        cloud_properties:
          security_groups:
            - cf
          subnet: (( properties.template_only.aws.subnet_ids.cf2 ))

resource_pools:
  - name: small_z1
    network: cf1
    size: (( auto ))
    stemcell: (( meta.stemcell ))
    cloud_properties:
      instance_type: m1.small
      availability_zone: (( meta.zones.primary ))

  - name: small_z2
    network: cf2
    size: (( auto ))
    stemcell: (( meta.stemcell ))
    cloud_properties:
      instance_type: m1.small
      availability_zone: (( meta.zones.secondary ))

  - name: medium_z1
    network: cf1
    size: (( auto ))
    stemcell: (( meta.stemcell ))
    cloud_properties:
      instance_type: m1.medium
      availability_zone: (( meta.zones.primary ))

  - name: medium_z2
    network: cf2
    size: (( auto ))
    stemcell: (( meta.stemcell ))
    cloud_properties:
      instance_type: m1.medium
      availability_zone: (( meta.zones.secondary ))

  - name: large_z1
    network: cf1
    size: (( auto ))
    stemcell: (( meta.stemcell ))
    cloud_properties:
      instance_type: m1.medium
      availability_zone: (( meta.zones.primary ))

  - name: large_z2
    network: cf2
    size: (( auto ))
    stemcell: (( meta.stemcell ))
    cloud_properties:
      instance_type: m1.medium
      availability_zone: (( meta.zones.secondary ))

  - name: runner_z1
    network: cf1
    size: (( auto ))
    stemcell: (( meta.stemcell ))
    cloud_properties:
      instance_type: (( merge || "m1.large" ))
      availability_zone: (( meta.zones.primary ))

  - name: runner_z2
    network: cf2
    size: (( auto ))
    stemcell: (( meta.stemcell ))
    cloud_properties:
      instance_type: (( merge || "m1.large" ))
      availability_zone: (( meta.zones.secondary ))

  - name: router_z1
    network: cf1
    size: (( auto ))
    stemcell: (( meta.stemcell ))
    cloud_properties:
      instance_type: m1.small
      availability_zone: (( meta.zones.primary ))
      elbs: (( merge || ["cfrouter"] ))

  - name: router_z2
    network: cf2
    size: (( auto ))
    stemcell: (( meta.stemcell ))
    cloud_properties:
      instance_type: m1.small
      availability_zone: (( meta.zones.secondary ))
      elbs: (( merge || ["cfrouter"] ))

jobs:
  - name: nats_z2
    template: nats
    instances: 1
    resource_pool: medium_z2
    networks:
      - name: cf2
        static_ips: (( static_ips(1) ))
    properties:
      networks: (( meta.networks.z2 ))
      syslog_aggregator: (( meta.syslog.z2 ))

  - name: logs_z1
    template: syslog_aggregator
    instances: 1
    resource_pool: medium_z1
    persistent_disk: (( merge || 100000 ))
    networks:
      - name: cf1
        static_ips: (( static_ips(0) ))
    properties:
      networks: (( meta.networks.z1 ))
      syslog_aggregator: (( meta.syslog.z1 ))

  - name: logs_z2
    template: syslog_aggregator
    instances: 1
    resource_pool: medium_z2
    persistent_disk: (( merge || 100000 ))
    networks:
      - name: cf2
        static_ips: (( static_ips(0) ))
    properties:
      networks: (( meta.networks.z2 ))
      syslog_aggregator: (( meta.syslog.z2 ))

  - name: uaa_z1
    template: uaa
    instances: (( merge || 1 ))
    resource_pool: large_z1
    networks:
      - name: cf1
    properties:
      networks: (( meta.networks.z1 ))
      syslog_aggregator: (( meta.syslog.z1 ))

  - name: uaa_z2
    template: uaa
    instances: (( merge || 1 ))
    resource_pool: large_z2
    networks:
      - name: cf2
    properties:
      networks: (( meta.networks.z2 ))
      syslog_aggregator: (( meta.syslog.z2 ))

  - name: login_z1
    template: login
    instances: (( merge || 1 ))
    resource_pool: medium_z1
    networks:
      - name: cf1
    properties:
      networks: (( meta.networks.z1 ))
      syslog_aggregator: (( meta.syslog.z1 ))

  - name: api_z1
    template: cloud_controller_ng
    instances: (( merge || 1 ))
    resource_pool: large_z1
    networks:
      - name: cf1
    properties:
      ccdb: ccdb
      networks: (( meta.networks.z1 ))
      syslog_aggregator: (( meta.syslog.z1 ))

  - name: api_z2
    template: cloud_controller_ng
    instances: (( merge || 1 ))
    resource_pool: large_z2
    networks:
      - name: cf2
    properties:
      ccdb: ccdb
      networks: (( meta.networks.z2 ))
      syslog_aggregator: (( meta.syslog.z2 ))

  - name: hm_z1
    template: health_manager_next
    instances: 1
    resource_pool: medium_z1
    networks:
      - name: cf1
    properties:
      networks: (( meta.networks.z1 ))
      syslog_aggregator: (( meta.syslog.z1 ))

  - name: runner_z1
    template: (( merge || ["dea_next", "dea_logging_agent"] ))
    instances: (( merge || 1 ))
    resource_pool: runner_z1
    networks:
      - name: cf1
    properties:
      networks: (( meta.networks.z1 ))
      syslog_aggregator: (( meta.syslog.z1 ))

  - name: runner_z2
    template: (( merge || ["dea_next", "dea_logging_agent"] ))
    instances: (( merge || 1 ))
    resource_pool: runner_z2
    networks:
      - name: cf2
    properties:
      networks: (( meta.networks.z2 ))
      syslog_aggregator: (( meta.syslog.z2 ))

  - name: taskmaster_z1
    template: narc
    instances: (( merge || 1 ))
    resource_pool: runner_z1
    networks:
      - name: cf1
    properties:
      networks: (( meta.networks.z1 ))
      syslog_aggregator: (( meta.syslog.z1 ))

  - name: taskmaster_z2
    template: narc
    instances: (( merge || 1 ))
    resource_pool: runner_z2
    networks:
      - name: cf2
    properties:
      networks: (( meta.networks.z2 ))
      syslog_aggregator: (( meta.syslog.z2 ))

  - name: stats_z1
    template: collector
    instances: 1
    resource_pool: small_z1
    networks:
      - name: cf1
    properties:
      networks: (( meta.networks.z1 ))
      syslog_aggregator: (( meta.syslog.z1 ))

  - name: loggregator_z1
    template: loggregator
    instances: (( merge || 1 ))
    resource_pool: small_z1
    networks:
      - name: cf1
        static_ips: (( static_ips(21) ))
    properties:
      networks: (( meta.networks.z1 ))
      syslog_aggregator: (( meta.syslog.z1 ))

  - name: router_z1
    template: gorouter
    instances: (( merge || 1 ))
    resource_pool: router_z1
    networks:
      - name: cf1
        static_ips: (( static_ips(5, 6, 15, 16, 17, 18, 19, 20) ))
    properties:
      networks: (( meta.networks.z1 ))
      syslog_aggregator: (( meta.syslog.z1 ))

  - name: router_z2
    template: gorouter
    instances: (( merge || 1 ))
    resource_pool: router_z2
    networks:
      - name: cf2
        static_ips: (( static_ips(5, 6, 15, 16, 17, 18, 19, 20) ))
    properties:
      networks: (( meta.networks.z2 ))
      syslog_aggregator: (( meta.syslog.z2 ))

properties:
  template_only: (( merge ))

  domain: (( merge ))
  system_domain: (( merge || domain ))
  system_domain_organization: (( merge || nil ))
  app_domains: (( merge || [domain] ))

  nats:
    user: (( merge ))
    password: (( merge ))
    address: (( jobs.nats_z2.networks.cf2.static_ips.[0] ))
    port: 4222

  dea_next:
    memory_mb: (( merge || meta.instance_sizes.memory.m1_large - 1024 ))
    memory_overcommit_factor: (( merge || 3 ))
    disk_mb: (( merge || meta.instance_sizes.disk.m1_large - 20000 ))
    disk_overcommit_factor: (( merge || 2 ))
    deny_networks:
      - 169.254.0.0/16 # AWS Status
      - 10.10.0.0/24 # BOSH network
      - (( networks.cf1.subnets.[0].range ))
      - (( networks.cf2.subnets.[0].range ))
    allow_networks:
      - 10.10.0.2/32 # Amazon DNS

  loggregator:
    router: (( jobs.loggregator_z1.networks.cf1.static_ips.[0] ":3456" ))
    servers:
    - (( router ))
    status:
      user: (( merge ))
      password: (( merge ))
      port: 5768

  cc: (( merge ))
  ccdb: (( merge ))

  ccng: (( cc ))
  ccdb_ng: (( ccdb ))

  uaa: (( merge ))
  uaadb: (( merge ))

  login: (( merge ))

  router:
    status:
      user: (( merge ))
      password: (( merge ))

  syslog_aggregator: (( merge || nil ))

  collector:
    use_datadog: true
    datadog_api_key: (( template_only.datadog.datadog_api_key || "" ))
    datadog_application_key: (( template_only.datadog.datadog_application_key || "" ))
    deployment_name: (( name ))
