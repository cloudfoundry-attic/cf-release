name: (( meta.environment ))

director_uuid: (( merge ))

default_releases: [{name: cf, version: latest}]
releases: (( merge || default_releases ))

networks: (( merge ))

jobs:
  - name: consul_z1
    templates: (( merge || meta.consul_templates ))
    instances: 2
    persistent_disk: 1024
    resource_pool: small_z1
    default_networks:
    - name: cf1
    networks: (( merge || default_networks ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      consul:
        agent:
          mode: server
      metron_agent:
        zone: z1

  - name: consul_z2
    templates: (( merge || meta.consul_templates ))
    instances: 1
    persistent_disk: 1024
    resource_pool: small_z2
    default_networks:
    - name: cf2
    networks: (( merge || default_networks ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      consul:
        agent:
          mode: server
      metron_agent:
        zone: z2

  - name: ha_proxy_z1
    templates: (( merge || meta.ha_proxy_templates ))
    instances: 0
    resource_pool: router_z1
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      ha_proxy:
      router:
        servers: (( merge || jobs.router_z1.networks.cf1.static_ips jobs.router_z2.networks.cf2.static_ips || nil ))
      metron_agent:
        zone: z1
    update: (( merge || empty_hash ))

  - name: nats_z1
    templates: (( merge || meta.nats_templates ))
    instances: 1
    resource_pool: medium_z1
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      metron_agent:
        zone: z1
    update: (( merge || empty_hash ))

  - name: nats_z2
    templates: (( merge || meta.nats_templates ))
    instances: 1
    resource_pool: medium_z2
    default_networks:
      - name: cf2
    networks: (( merge || default_networks ))
    properties:
      metron_agent:
        zone: z2
    update: (( merge || empty_hash ))

  - name: etcd_z1
    templates: (( merge || meta.etcd_templates ))
    instances: 2
    persistent_disk: 10024
    resource_pool: medium_z1
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      metron_agent:
        zone: z1
    update:
      serial: true
      max_in_flight: 1

  - name: etcd_z2
    templates: (( merge || meta.etcd_templates ))
    instances: 1
    persistent_disk: 10024
    resource_pool: medium_z2
    default_networks:
      - name: cf2
    networks: (( merge || default_networks ))
    properties:
      metron_agent:
        zone: z2
    update:
      serial: true
      max_in_flight: 1

  - name: stats_z1
    templates: (( merge || meta.stats_templates ))
    instances: 1
    resource_pool: small_z1
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      metron_agent:
        zone: z1
    update: (( merge || empty_hash ))

  - name: nfs_z1
    templates: (( merge || meta.nfs_templates ))
    instances: 0
    resource_pool: medium_z1
    persistent_disk: 102400
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      consul:
        agent:
          services:
            blobstore: {}
      metron_agent:
        zone: z1
      route_registrar:
        routes: (( merge || meta.blobstore_routes ))
    update: (( merge || empty_hash ))

  - name: blobstore_z1
    templates: (( merge || meta.blobstore_templates ))
    instances: 0
    resource_pool: medium_z1
    persistent_disk: 102400
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      consul:
        agent:
          services:
            blobstore: {}
      metron_agent:
        zone: z1
      route_registrar:
        routes: (( merge || meta.blobstore_routes ))
    update: (( merge || empty_hash ))

  - name: postgres_z1
    templates: (( merge || meta.postgres_templates ))
    instances: 0
    resource_pool: medium_z1
    persistent_disk: 4096
    default_networks:
    - name: cf1
    networks: (( merge || default_networks ))
    properties:
      metron_agent:
        zone: z1
    update: (( merge || empty_hash ))

  - name: uaa_z1
    templates: (( merge || meta.uaa_templates ))
    instances: 1
    resource_pool: medium_z1
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      consul:
        agent:
          services:
            uaa: {}
      metron_agent:
        zone: z1
      route_registrar:
        routes: (( merge || meta.uaa_routes ))
      uaa:
        proxy:
          servers: (( merge || jobs.router_z1.networks.cf1.static_ips jobs.router_z2.networks.cf2.static_ips || nil ))
    update: (( merge || empty_hash ))

  - name: uaa_z2
    templates: (( merge || meta.uaa_templates ))
    instances: 1
    resource_pool: medium_z2
    default_networks:
      - name: cf2
    networks: (( merge || default_networks ))
    properties:
      consul:
        agent:
          services:
            uaa: {}
      metron_agent:
        zone: z2
      route_registrar:
        routes: (( merge || meta.uaa_routes ))
      uaa:
        proxy:
          servers: (( merge || jobs.router_z1.networks.cf1.static_ips jobs.router_z2.networks.cf2.static_ips || nil ))
    update: (( merge || empty_hash ))

  - name: api_z1
    templates: (( merge || meta.api_templates ))
    instances: 1
    resource_pool: large_z1
    persistent_disk: 0
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      consul:
        agent:
          services: (( merge || meta.api_consul_services ))
      metron_agent:
        zone: z1
      route_registrar:
        routes: (( merge || meta.api_routes ))
      nfs_server: (( meta.nfs_server ))
    update: (( merge || empty_hash ))

  - name: api_z2
    templates: (( merge || meta.api_templates ))
    instances: 1
    resource_pool: large_z2
    persistent_disk: 0
    default_networks:
      - name: cf2
    networks: (( merge || default_networks ))
    properties:
      consul:
        agent:
          services: (( merge || meta.api_consul_services ))
      metron_agent:
        zone: z2
      route_registrar:
        routes: (( merge || meta.api_routes ))
      nfs_server: (( meta.nfs_server ))
    update: (( merge || empty_hash ))

  - name: clock_global
    templates: (( merge || meta.clock_templates ))
    instances: 1
    resource_pool: medium_z1
    persistent_disk: 0
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      metron_agent:
        zone: z1
    update: (( merge || empty_hash ))

  - name: api_worker_z1
    templates: (( merge || meta.api_worker_templates ))
    instances: 1
    resource_pool: small_z1
    persistent_disk: 0
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      metron_agent:
        zone: z1
      nfs_server: (( meta.nfs_server ))
    update: (( merge || empty_hash ))

  - name: api_worker_z2
    templates: (( merge || meta.api_worker_templates ))
    instances: 1
    resource_pool: small_z2
    persistent_disk: 0
    default_networks:
      - name: cf2
    networks: (( merge || default_networks ))
    properties:
      metron_agent:
        zone: z2
      nfs_server: (( meta.nfs_server ))
    update: (( merge || empty_hash ))

  - name: hm9000_z1
    templates: (( merge || meta.hm9000_templates ))
    instances: 1
    resource_pool: medium_z1
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      consul:
        agent:
          services:
            hm9000: {}
      metron_agent:
        zone: z1
      route_registrar:
        routes: (( merge || meta.hm9000_routes ))
    update: (( merge || empty_hash ))

  - name: hm9000_z2
    templates: (( merge || meta.hm9000_templates ))
    instances: 1
    resource_pool: medium_z2
    default_networks:
      - name: cf2
    networks: (( merge || default_networks ))
    properties:
      consul:
        agent:
          services:
            hm9000: {}
      metron_agent:
        zone: z2
      route_registrar:
        routes: (( merge || meta.hm9000_routes ))
    update: (( merge || empty_hash ))

  - name: runner_z1
    templates: (( merge || meta.dea_templates ))
    instances: 1
    resource_pool: runner_z1
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      dea_next:
        zone: (( merge || "z1" ))
      metron_agent:
        zone: z1
      consul:
        agent:
          services:
            dea:
              check:
                name: dns_health_check
                script: /var/vcap/jobs/dea_next/bin/dns_health_check
                interval: 5m
                status: passing
    update:
      max_in_flight: 1

  - name: runner_z2
    templates: (( merge || meta.dea_templates ))
    instances: 1
    resource_pool: runner_z2
    default_networks:
      - name: cf2
    networks: (( merge || default_networks ))
    properties:
      dea_next:
        zone: (( merge || "z2" ))
      metron_agent:
        zone: z2
      consul:
        agent:
          services:
            dea:
              check:
                name: dns_health_check
                script: /var/vcap/jobs/dea_next/bin/dns_health_check
                interval: 5m
                status: passing
    update:
      max_in_flight: 1

  - name: loggregator_z1
    templates: (( merge || meta.loggregator_templates ))
    instances: 0
    resource_pool: medium_z1
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      doppler:
        zone: z1
      metron_agent:
        zone: z1
    update: (( merge || empty_hash ))

  - name: loggregator_z2
    templates: (( merge || meta.loggregator_templates ))
    instances: 0
    resource_pool: medium_z2
    default_networks:
      - name: cf2
    networks: (( merge || default_networks ))
    properties:
      doppler:
        zone: z2
      metron_agent:
        zone: z2
    update: (( merge || empty_hash ))

  - name: doppler_z1
    templates: (( merge || meta.loggregator_templates ))
    instances: 1
    resource_pool: medium_z1
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      doppler:
        zone: z1
      metron_agent:
        zone: z1
    update: (( merge || empty_hash ))

  - name: doppler_z2
    templates: (( merge || meta.loggregator_templates ))
    instances: 1
    resource_pool: medium_z2
    default_networks:
      - name: cf2
    networks: (( merge || default_networks ))
    properties:
      doppler:
        zone: z2
      metron_agent:
        zone: z2
    update: (( merge || empty_hash ))

  - name: loggregator_trafficcontroller_z1
    templates: (( merge || meta.loggregator_trafficcontroller_templates ))
    instances: 1
    resource_pool: small_z1
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      traffic_controller:
        zone: z1
      metron_agent:
        zone: z1
      route_registrar:
        routes: (( merge || meta.loggregator_trafficcontroller_routes ))
    update: (( merge || empty_hash ))

  - name: loggregator_trafficcontroller_z2
    templates: (( merge || meta.loggregator_trafficcontroller_templates ))
    instances: 1
    resource_pool: small_z2
    default_networks:
      - name: cf2
    networks: (( merge || default_networks ))
    properties:
      traffic_controller:
        zone: z2
      metron_agent:
        zone: z2
      route_registrar:
        routes: (( merge || meta.loggregator_trafficcontroller_routes ))
    update: (( merge || empty_hash ))

  - name: router_z1
    templates: (( merge || meta.router_templates ))
    instances: 1
    resource_pool: router_z1
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      consul:
        agent:
          services:
            gorouter: {}
      metron_agent:
        zone: z1
    update: (( merge || empty_hash ))

  - name: router_z2
    templates: (( merge || meta.router_templates ))
    instances: 1
    resource_pool: router_z2
    default_networks:
      - name: cf2
    networks: (( merge || default_networks ))
    properties:
      consul:
        agent:
          services:
            gorouter: {}
      metron_agent:
        zone: z2
    update: (( merge || empty_hash ))

  - name: acceptance_tests
    templates:
    - name: acceptance-tests
      release: (( meta.cf_release_name ))
    instances: 1
    resource_pool: small_errand
    lifecycle: errand
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))

  - name: smoke_tests
    templates:
    - name: smoke-tests
      release: (( meta.cf_release_name ))
    instances: 0
    resource_pool: small_errand
    lifecycle: errand
    default_networks:
      - name: cf1
    networks: (( merge || default_networks ))
    properties:
      <<: (( merge ))

properties:
  <<: (( merge ))

  app_ssh: ~

  blobstore:
    port: (( merge || 80 ))
    admin_users: (( merge || nil ))
    secure_link:
      secret: (( merge || nil ))
    tls:
      port: (( merge || 443 ))
      cert: ~
      private_key: ~
      ca_cert: ~

  consul:
    agent:
      domain: cf.internal
      log_level: (( merge || nil ))
      servers:
        lan: (( meta.consul_servers ))
    ca_cert: (( merge ))
    agent_cert: (( merge ))
    agent_key: (( merge ))
    encrypt_keys: (( merge ))
    server_cert: (( merge ))
    server_key: (( merge ))

  dropsonde:
    enabled: true

  support_address: (( merge || "http://support.cloudfoundry.com" ))
  description: null
  ssl:
    skip_cert_verify: (( merge || false ))
  system_domain: (( merge ))
  system_domain_organization: ~
  app_domains: (( [system_domain] ))

  disk_quota_enabled: true

  request_timeout_in_seconds: 900

  nats:
    user: (( merge ))
    password: (( merge ))
    port: 4222
    machines: (( merge || jobs.nats_z1.networks.cf1.static_ips jobs.nats_z2.networks.cf2.static_ips ))
    debug: false
    trace: false
    monitor_port: 0
    prof_port: 0

  etcd:
    machines: (( merge || jobs.etcd_z1.networks.cf1.static_ips jobs.etcd_z2.networks.cf2.static_ips ))
    require_ssl: false
    peer_require_ssl: false

  etcd_metrics_server:
    nats:
      machines: (( .properties.nats.machines ))
      username: (( .properties.nats.user ))
      password: (( .properties.nats.password ))

  dea_next:
    memory_overcommit_factor: null
    disk_overcommit_factor: null
    instance_bandwidth_limit: (( merge || nil ))
    staging_bandwidth_limit: (( merge || nil ))
    memory_mb: (( merge || nil ))
    disk_mb: (( merge || nil ))
    staging_disk_inode_limit: 200000
    instance_disk_inode_limit: 200000
    deny_networks: (( merge || [] ))
    allow_networks: (( merge || [] ))
    kernel_network_tuning_enabled: true
    directory_server_protocol: https
    evacuation_bail_out_time_in_seconds: 600
    logging_level: debug
    staging_disk_limit_mb: 6144
    staging_memory_limit_mb: 1024
    default_health_check_timeout: 60
    advertise_interval_in_seconds: 5
    heartbeat_interval_in_seconds: 10
    rlimit_core: (( merge || 0 ))
    allow_host_access: ~
    mtu: (( merge || nil ))
    post_setup_hook: null

    ca_cert:
    client_cert:
    client_key:
    enable_ssl: false
    server_cert:
    server_key:

  loggregator:
    maxRetainedLogMessages: 100
    debug: (( merge || false ))
    blacklisted_syslog_ranges: ~
    outgoing_dropsonde_port: 8081
    tls:
      ca_cert: ~
    etcd:
      machines: (( .properties.etcd.machines ))

  loggregator_endpoint:
    shared_secret: (( merge ))

  doppler:
    message_drain_buffer_size: ~
    zone: (( merge || nil ))
    maxRetainedLogMessages: 100
    debug: (( merge || false ))
    blacklisted_syslog_ranges: ~
    unmarshaller_count: (( merge || 5 ))
    port: (( merge || 4443 ))
    tls:
      server_cert: ~
      server_key: ~
      port: ~
      enable: ~

  doppler_endpoint:
    shared_secret: (( .properties.loggregator_endpoint.shared_secret ))

  metron_agent:
    deployment: (( meta.environment ))
    preferred_protocol: ~
    enable_buffer: ~
    buffer_size: ~
    tls:
      client_cert: ~
      client_key: ~

  metron_endpoint:
    shared_secret: (( .properties.loggregator_endpoint.shared_secret ))

  traffic_controller:
    outgoing_port: 8080
    zone: (( merge || nil ))
    disable_access_control: (( merge || nil ))
    security_event_logging:
      enabled: (( merge || false ))

  logger_endpoint: ~

  cc:
    jobs:
      global:
        timeout_in_seconds: 14400 # 4 hours
      app_bits_packer:
        timeout_in_seconds: ~
      app_events_cleanup:
        timeout_in_seconds: ~
      app_usage_events_cleanup:
        timeout_in_seconds: ~
      blobstore_delete:
        timeout_in_seconds: ~
      blobstore_upload:
        timeout_in_seconds: ~
      droplet_deletion:
        timeout_in_seconds: ~
      droplet_upload:
        timeout_in_seconds: ~
      generic:
        number_of_workers: ~

    app_events:
      cutoff_age_in_days: 31
    app_usage_events:
      cutoff_age_in_days: 31
    service_usage_events:
      cutoff_age_in_days: 31
    audit_events:
      cutoff_age_in_days: 31

    users_can_select_backend: true
    default_to_diego_backend: false
    allow_app_ssh_access: true
    default_app_memory: 1024
    default_app_disk_in_mb: 1024
    maximum_app_disk_in_mb: 2048
    client_max_body_size: 15M

    default_health_check_timeout: 60
    maximum_health_check_timeout: 180

    min_cli_version: ~
    min_recommended_cli_version: ~

    system_hostnames: ~
    external_host: api
    external_port: 9022
    srv_api_uri: (( "https://" external_host "." system_domain ))

    bulk_api_password: (( merge ))
    internal_api_user: "internal_user"
    internal_api_password: (( bulk_api_password ))

    logging_level: debug2
    db_logging_level: debug2

    staging_upload_user: (( merge ))
    staging_upload_password: (( merge ))

    db_encryption_key: (( merge ))

    directories: ~

    disable_custom_buildpacks: false

    broker_client_timeout_seconds: 70
    broker_client_default_async_poll_interval_seconds: ~
    broker_client_max_async_poll_duration_minutes: ~

    resource_pool:
      blobstore_type: (( merge || "webdav" ))
      webdav_config: (( merge || properties.cc.webdav_config ))
      resource_directory_key: (( system_domain "-cc-resources" ))
      fog_connection: ~
      fog_aws_storage_options: ~
      cdn: ~

    packages:
      blobstore_type: (( merge || "webdav" ))
      webdav_config: (( merge || properties.cc.webdav_config ))
      app_package_directory_key: (( system_domain "-cc-packages" ))
      fog_connection: ~
      fog_aws_storage_options: ~
      cdn: ~
      max_package_size: 1073741824
      max_valid_packages_stored: ~

    droplets:
      blobstore_type: (( merge || "webdav" ))
      webdav_config: (( merge || properties.cc.webdav_config ))
      droplet_directory_key: (( system_domain "-cc-droplets" ))
      fog_connection: ~
      fog_aws_storage_options: ~
      cdn: ~
      max_staged_droplets_stored: ~

    development_mode: false

    newrelic:
      license_key: ~
      environment_name: (( meta.environment ))
      developer_mode: (( cc.development_mode ))
      monitor_mode: false
      capture_params: false
      transaction_tracer:
        enabled: true
        record_sql: "obfuscated"

    buildpacks:
      blobstore_type: (( merge || "webdav" ))
      webdav_config: (( merge || properties.cc.webdav_config ))
      buildpack_directory_key: (( system_domain "-cc-buildpacks" ))
      fog_connection: ~
      fog_aws_storage_options: ~
      cdn: ~
    quota_definitions: (( merge || meta.default_quota_definitions ))
    default_quota_definition: default

    user_buildpacks: (( merge || [] ))
    system_buildpacks: (( merge || default_buildpacks ))
    default_buildpacks:
      - name: staticfile_buildpack
        package: staticfile-buildpack
      - name: java_buildpack
        package: buildpack_java
      - name: ruby_buildpack
        package: ruby-buildpack
      - name: nodejs_buildpack
        package: nodejs-buildpack
      - name: go_buildpack
        package: go-buildpack
      - name: python_buildpack
        package: python-buildpack
      - name: php_buildpack
        package: php-buildpack
      - name: binary_buildpack
        package: binary-buildpack

    install_buildpacks: (( system_buildpacks user_buildpacks ))

    stacks: ~

    security_group_definitions: (( merge || meta.default_security_group_definitions ))
    default_running_security_groups: (( merge || ["public_networks", "dns"] ))
    default_staging_security_groups: (( merge || ["public_networks", "dns"] ))

    allowed_cors_domains: (( merge || [] ))
    thresholds:
      api:
        alert_if_above_mb: ~
        restart_if_consistently_above_mb: ~
        restart_if_above_mb: ~
      worker:
        alert_if_above_mb: ~
        restart_if_consistently_above_mb: ~
        restart_if_above_mb: ~
    external_protocol: ~

    webdav_config:
      blobstore_timeout: 5
      private_endpoint: "https://blobstore.service.cf.internal"
      public_endpoint: (( "http://blobstore." system_domain || nil))
      username: ((  properties.blobstore.admin_users.[0].username || nil ))
      password: ((  properties.blobstore.admin_users.[0].password || nil ))
      ca_cert: ((  properties.blobstore.tls.ca_cert || nil ))

    reserved_private_domains: ~

    dea_use_https: false
    minimum_candidate_stagers: (( merge || nil ))
    volume_services_enabled: (( merge || nil ))

    security_event_logging:
      enabled: (( merge || nil ))

  ccdb: (( merge ))

  ha_proxy: (( merge || nil ))

  hm9000:
    url: (( "https://hm9000." system_domain ))
    port: 5155
    ca_cert:
    server_cert:
    server_key:
    client_cert:
    client_key:

  login:
    enabled: true
    analytics:
      code: ~
      domain: ~
    url: ~
    catalina_opts: ~
    protocol: ~
    brand: oss
    asset_base_url: ~
    uaa_base: ~
    self_service_links_enabled: ~
    signups_enabled: ~
    invitations_enabled: ~
    spring_profiles: ~
    messages: ~

    notifications:
      url: ~

    smtp:
      host: ~
      port: ~
      user: ~
      password: ~

    links:
      passwd: (( "https://login." system_domain "/forgot_password" ))
      signup: (( "https://login." system_domain "/create_account" ))

    logout: ~

    tiles: ~

    saml: ~

    restricted_ips_regex: ~

  uaa:
    ca_cert: (( merge || nil ))
    catalina_opts: ~
    url: (( "https://uaa." system_domain ))
    issuer: (( url ))

    no_ssl: ~
    require_https: ~

    scim:
      userids_enabled: (( merge || true ))
      users: (( merge ))
      external_groups: ~
      groups: ~

    ssl:
      port: -1
    sslCertificate: ~
    sslPrivateKey: ~

    jwt: (( merge ))

    cc:
      client_secret: (( merge ))

    admin:
      client_secret: (( merge ))

    authentication:
      policy:
        lockoutAfterFailures: ~
        countFailuresWithinSeconds: ~
        lockoutPeriodSeconds: ~

    login: ~

    ldap: ~

    newrelic: ~
    port: 8080
    spring_profiles: ~

    user: ~
    clients:
      <<: (( merge || nil ))
      login:
        override: true
        scope: openid,oauth.approvals
        authorities: oauth.login,scim.write,clients.read,notifications.write,critical_notifications.write,emails.write,scim.userids,password.write
        secret: (( merge ))
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        redirect-uri: (( "https://login." system_domain ))
        autoapprove: true
      cf:
        override: true
        authorized-grant-types: password,refresh_token
        scope: cloud_controller.read,cloud_controller.write,openid,password.write,cloud_controller.admin,scim.read,scim.write,doppler.firehose,uaa.user,routing.router_groups.read,routing.router_groups.write
        authorities: uaa.none
        access-token-validity: 600
        refresh-token-validity: 2592000
      notifications:
        secret: (( merge ))
        authorities: cloud_controller.admin,scim.read
        authorized-grant-types: client_credentials
      doppler:
        override: true
        authorities: uaa.resource
        secret: (( merge ))
      cloud_controller_username_lookup:
        authorities: scim.userids
        secret: (( merge ))
        authorized-grant-types: client_credentials
      cc_routing:
        authorities: routing.router_groups.read
        secret: (( merge ))
        authorized-grant-types: client_credentials
      gorouter:
        authorities: routing.routes.read
        authorized-grant-types: client_credentials,refresh_token
        secret: (( merge ))
      tcp_emitter:
        authorities: routing.routes.write,routing.routes.read,routing.router_groups.read
        authorized-grant-types: client_credentials,refresh_token
        secret: (( merge ))
      tcp_router:
        authorities: routing.routes.read,routing.router_groups.read
        authorized-grant-types: client_credentials,refresh_token
        secret: (( merge ))

    database: ~

    restricted_ips_regex: 10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|169\.254\.\d{1,3}\.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3}|172\.1[6-9]{1}\.\d{1,3}\.\d{1,3}|172\.2[0-9]{1}\.\d{1,3}\.\d{1,3}|172\.3[0-1]{1}\.\d{1,3}\.\d{1,3}

    zones: (( merge || nil ))

  uaadb: (( merge ))

  databases: ~

  router:
    enable_proxy: (( merge || nil ))
    enable_ssl: (( merge || nil ))
    ssl_cert: (( merge || nil ))
    ssl_key: (( merge || nil ))
    cipher_suites: (( merge || nil ))
    requested_route_registration_interval_in_seconds: (( merge || nil ))
    ssl_skip_validation: (( merge || nil ))
    port: (( merge || nil ))
    status:
      user: (( merge ))
      password: (( merge ))
      port: (( merge || nil ))
    secure_cookies: (( merge || nil ))
    route_services_secret: (( merge || nil ))
    route_services_secret_decrypt_only: (( merge || nil ))
    route_services_timeout: (( merge || nil ))
    route_services_recommend_https: (( merge || nil ))
    logrotate: (( merge || nil ))
    extra_headers_to_log: (( merge || nil ))
    debug_addr: (( merge || nil ))
    drain_wait: (( merge || nil ))
    enable_access_log_streaming: (( merge || nil ))

  routing_api:
    enabled: (( merge || nil ))

  syslog_daemon_config: ~

  nfs_server: (( meta.nfs_server ))

  collector: (( merge || nil ))

  acceptance_tests: (( merge || nil ))

  smoke_tests: (( merge || nil ))

compilation:
  workers: 6
  network: cf1
  reuse_compilation_vms: true
  cloud_properties: (( merge ))

update:
  canaries: 1
  max_in_flight: 1
  canary_watch_time: 30000-600000
  update_watch_time: 5000-600000
  serial: true

resource_pools:
  - name: small_z1
    network: cf1
    stemcell: (( meta.stemcell ))
    cloud_properties: (( merge ))
    env: (( merge || meta.default_env ))

  - name: small_z2
    network: cf2
    stemcell: (( meta.stemcell ))
    cloud_properties: (( merge ))
    env: (( merge || meta.default_env ))

  - name: medium_z1
    network: cf1
    stemcell: (( meta.stemcell ))
    cloud_properties: (( merge ))
    env: (( merge || meta.default_env ))

  - name: medium_z2
    network: cf2
    stemcell: (( meta.stemcell ))
    cloud_properties: (( merge ))
    env: (( merge || meta.default_env ))

  - name: large_z1
    network: cf1
    stemcell: (( meta.stemcell ))
    cloud_properties: (( merge ))
    env: (( merge || meta.default_env ))

  - name: large_z2
    network: cf2
    stemcell: (( meta.stemcell ))
    cloud_properties: (( merge ))
    env: (( merge || meta.default_env ))

  - name: runner_z1
    network: cf1
    stemcell: (( meta.stemcell ))
    cloud_properties: (( merge ))
    env: (( merge || meta.default_env ))

  - name: runner_z2
    network: cf2
    stemcell: (( meta.stemcell ))
    cloud_properties: (( merge ))
    env: (( merge || meta.default_env ))

  - name: router_z1
    network: (( merge || "cf1" ))
    stemcell: (( meta.stemcell ))
    cloud_properties: (( merge ))
    env: (( merge || meta.default_env ))

  - name: router_z2
    network: (( merge || "cf2" ))
    stemcell: (( meta.stemcell ))
    cloud_properties: (( merge ))
    env: (( merge || meta.default_env ))

  - name: small_errand
    network: cf1
    stemcell: (( meta.stemcell ))
    cloud_properties: (( merge || resource_pools.small_z1.cloud_properties ))
    env: (( merge || meta.default_env ))

  - name: xlarge_errand
    network: cf1
    stemcell: (( meta.stemcell ))
    cloud_properties: (( merge || resource_pools.large_z1.cloud_properties ))
    env: (( merge || meta.default_env ))

meta:
  # override this in your stub to set the environment name,
  # which is used for the deployment name
  #
  # i.e. cf-tabasco
  environment: ~

  default_env:
    # Default vcap & root password on deployed VMs (ie c1oudc0w)
    # Generated using mkpasswd -m sha-512
    bosh:
      password: (( merge || "$6$4gDD3aV0rdqlrKC$2axHCxGKIObs6tAmMTqYCspcdvQXh3JJcvWOY2WGb4SrdXtnCyNaWlrf3WEqvYR2MYizEGp3kMmbpwBC6jsHt0" ))

  stemcell: (( merge ))

  cf_release_name: cf
  capi_release_name: (( releases.capi.name || "cf" ))
  consul_release_name: (( releases.consul.name || "cf" ))
  etcd_release_name: (( releases.etcd.name || "cf" ))
  java_buildpack_release_name: (( releases.java-buildpack-release.name || "cf" ))
  go_buildpack_release_name: (( releases.go-buildpack-release.name || "cf" ))
  binary_buildpack_release_name: (( releases.binary-buildpack-release.name || "cf" ))
  nodejs_buildpack_release_name: (( releases.nodejs-buildpack-release.name || "cf" ))
  ruby_buildpack_release_name: (( releases.ruby-buildpack-release.name || "cf" ))
  php_buildpack_release_name: (( releases.php-buildpack-release.name || "cf" ))
  python_buildpack_release_name: (( releases.python-buildpack-release.name || "cf" ))
  staticfile_buildpack_release_name: (( releases.staticfile-buildpack-release.name || "cf" ))
  loggregator_release_name: (( releases.loggregator.name || "cf" ))
  uaa_release_name: (( releases.uaa.name || "cf" ))

  consul_servers: (( merge || jobs.consul_z1.networks.cf1.static_ips jobs.consul_z2.networks.cf2.static_ips ))

  nfs_client_ranges:
    - (( .networks.cf1.subnets.[0].range || nil ))
    - (( .networks.cf2.subnets.[0].range || nil ))

  nfs_server:
    address: (( merge || jobs.nfs_z1.networks.cf1.static_ips.[0] || nil ))
    allow_from_entries: (( merge || meta.nfs_client_ranges ))
    share: ~

  api_routes:
  - name: api
    tags:
      component: CloudController
    port: (( .properties.cc.external_port ))
    registration_interval: 20s
    uris:
    - (( "api." .properties.system_domain ))

  api_consul_services:
    cloud_controller_ng: {}

  api_templates:
  - name: consul_agent
    release: (( meta.consul_release_name ))
  - name: java-buildpack
    release: (( meta.java_buildpack_release_name ))
  - name: java-offline-buildpack
    release: (( meta.java_buildpack_release_name ))
  - name: go-buildpack
    release: (( meta.go_buildpack_release_name ))
  - name: binary-buildpack
    release: (( meta.binary_buildpack_release_name ))
  - name: nodejs-buildpack
    release: (( meta.nodejs_buildpack_release_name ))
  - name: ruby-buildpack
    release: (( meta.ruby_buildpack_release_name ))
  - name: php-buildpack
    release: (( meta.php_buildpack_release_name ))
  - name: python-buildpack
    release: (( meta.python_buildpack_release_name ))
  - name: staticfile-buildpack
    release: (( meta.staticfile_buildpack_release_name ))
  - name: cloud_controller_ng
    release: (( meta.capi_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))
  - name: statsd-injector
    release: (( meta.loggregator_release_name ))
  - name: route_registrar
    release: (( meta.cf_release_name ))

  api_worker_templates:
  - name: consul_agent
    release: (( meta.consul_release_name ))
  - name: cloud_controller_worker
    release: (( meta.capi_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))

  clock_templates:
  - name: cloud_controller_clock
    release: (( meta.capi_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))

  consul_templates:
  - name: consul_agent
    release: (( meta.consul_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))

  dea_templates:
  - name: consul_agent
    release: (( meta.consul_release_name ))
  - name: dea_next
    release: (( meta.cf_release_name ))
  - name: dea_logging_agent
    release: (( meta.loggregator_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))

  etcd_templates:
  - name: etcd
    release: (( meta.etcd_release_name ))
  - name: etcd_metrics_server
    release: (( meta.etcd_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))

  ha_proxy_templates:
  - name: haproxy
    release: (( meta.cf_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))
  - name: consul_agent
    release: (( meta.consul_release_name ))

  hm9000_routes:
  - name: hm9000
    port: (( .properties.hm9000.port ))
    registration_interval: 20s
    tags:
      component: HM9K
    uris:
    - (( "hm9000." .properties.system_domain ))

  hm9000_templates:
  - name: consul_agent
    release: (( meta.consul_release_name ))
  - name: hm9000
    release: (( meta.cf_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))
  - name: route_registrar
    release: (( meta.cf_release_name ))

  loggregator_templates:
  - name: doppler
    release: (( meta.loggregator_release_name ))
  - name: syslog_drain_binder
    release: (( meta.loggregator_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))

  loggregator_trafficcontroller_routes:
  - name: doppler
    port: (( .properties.loggregator.outgoing_dropsonde_port ))
    registration_interval: 20s
    uris:
    - (( "doppler." .properties.system_domain ))
  - name: loggregator
    port: (( .properties.traffic_controller.outgoing_port ))
    registration_interval: 20s
    uris:
    - (( "loggregator." .properties.system_domain ))

  loggregator_trafficcontroller_templates:
  - name: loggregator_trafficcontroller
    release: (( meta.loggregator_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))
  - name: route_registrar
    release: (( meta.cf_release_name ))

  nats_templates:
  - name: nats
    release: (( meta.cf_release_name ))
  - name: nats_stream_forwarder
    release: (( meta.cf_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))

  blobstore_routes:
  - name: blobstore
    port: (( .properties.blobstore.port ))
    registration_interval: 20s
    tags:
      component: blobstore
    uris:
    - (( "blobstore." .properties.system_domain ))

  blobstore_templates:
  - name: consul_agent
    release: (( meta.consul_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))
  - name: blobstore
    release: (( meta.capi_release_name ))
  - name: route_registrar
    release: (( meta.cf_release_name ))

  nfs_templates:
  - name: consul_agent
    release: (( meta.consul_release_name ))
  - name: debian_nfs_server
    release: (( meta.capi_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))
  - name: blobstore
    release: (( meta.capi_release_name ))
  - name: route_registrar
    release: (( meta.cf_release_name ))

  postgres_templates:
  - name: postgres
    release: (( meta.cf_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))

  router_templates:
  - name: consul_agent
    release: (( meta.consul_release_name ))
  - name: gorouter
    release: (( meta.cf_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))

  stats_templates:
  - name: collector
    release: (( meta.cf_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))

  uaa_routes:
  - name: uaa
    port: (( .properties.uaa.port ))
    registration_interval: 4s
    tags:
      component: uaa
    uris:
    - (( "uaa." .properties.system_domain ))
    - (( "*.uaa." .properties.system_domain ))
    - (( "login." .properties.system_domain ))
    - (( "*.login." .properties.system_domain ))
    health_check:
      name: uaa-healthcheck
      script_path: /var/vcap/jobs/uaa/bin/health_check

  uaa_templates:
  - name: uaa
    release: (( meta.uaa_release_name ))
  - name: metron_agent
    release: (( meta.loggregator_release_name ))
  - name: consul_agent
    release: (( meta.consul_release_name ))
  - name: route_registrar
    release: (( meta.cf_release_name ))
  - name: statsd-injector
    release: (( meta.loggregator_release_name ))

  default_quota_definitions:
    default:
       memory_limit: 10240
       total_services: 100
       total_service_keys: 1000
       non_basic_services_allowed: true
       total_routes: 1000
  default_security_group_definitions:
  - name: public_networks
    rules:
    - protocol: all
      destination: 0.0.0.0-9.255.255.255
    - protocol: all
      destination: 11.0.0.0-169.253.255.255
    - protocol: all
      destination: 169.255.0.0-172.15.255.255
    - protocol: all
      destination: 172.32.0.0-192.167.255.255
    - protocol: all
      destination: 192.169.0.0-255.255.255.255
  - name: dns
    rules:
    - protocol: tcp
      destination: 0.0.0.0/0
      ports: '53'
    - protocol: udp
      destination: 0.0.0.0/0
      ports: '53'

empty_hash: {}
