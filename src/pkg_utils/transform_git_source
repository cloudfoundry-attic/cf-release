#!/usr/bin/env ruby
# vim: fileencoding=utf-8
# vim: ts=2 sw=2 sts=2 et

require 'digest/sha1'
require 'tmpdir'
require 'pathname'
require 'rubygems'
require 'bundler'
require 'fileutils'
require 'logger'
require 'uri'

# Rewrite git sources in Gemfile and lock files to paths
#
# Usage: transform_git_source path/to/dir_w_Gemfile path/to/git/checkout

def `(cmd)
  @logger.debug "executing #{cmd}"
  result = super
  raise RuntimeError, "error while attempting to execute #{cmd}" unless $?.exitstatus == 0
  result
end

raise ArgumentError, "expecting $RELEASE_DIR, but not found" unless ENV["RELEASE_DIR"]
GIT_CACHE_ROOT_PATH=Pathname.new(ENV["RELEASE_DIR"]).join('.cache','vcap_git_gems').freeze

# fetch into a per-repo local bare repo to store all objects to speed up
# repeated clones
#
# rant: I like omni-repos, but per-repo checkouts make pieter happy, and i'm
# happy that he's happy
def fetch_into_cache(local_repo, spec)
  uri = spec.source.uri
  unless local_repo.exist?
    local_repo.mkpath
    Dir.chdir(local_repo.to_s) do
      %x(git clone --bare #{uri} .)
    end
  end
  Dir.chdir(local_repo) do
    cmd_rev_exist = "git cat-file -e #{spec.source.options["revision"]}"
    # Git 1.7.3 doesn't set a remote and / or fetch refspecs for bare clones,
    # what a pleasant surprise!
    refspecs = "+refs/heads/*:refs/remotes/origin/*"
    cmd_fetch = "git fetch --quiet #{uri} #{refspecs}"
    %x(#{cmd_rev_exist} || #{cmd_fetch} )
  end
end

# @param [URI] uri URI to the git repo
# @return [Pathname]
def local_repo_path(uri)
  raise unless uri.kind_of?(URI::Generic)
  scheme, host, port, path = [ uri.scheme, uri.host, uri.port, uri.path ]
  sanitized_parts = path.split('/').map {|s| URI::unescape(s).gsub(/[^-.\w]/, '_')}
  GIT_CACHE_ROOT_PATH.join([scheme, host, port].join("_")).join(*sanitized_parts)
end

# @param [Pathname] path
def checkout(spec, path)
  local_repo = local_repo_path(URI::parse(spec.source.uri))
  fetch_into_cache(local_repo, spec)
  if path.join('.git').exist?
    # somebody's done a checkout, hmm
    %x(git fetch --quiet #{local_repo.to_s})
  else
    # we haven't done a checkout yet
    path.parent.mkpath
    path.rmtree if path.exist?
    %x(git clone --no-checkout #{local_repo.to_s} #{path.to_s})
  end
  Dir.chdir(path) do
    revision = spec.source.options["revision"]
    %x(git reset --hard #{revision})
    if spec.source.submodules
      %x(git submodule update --init --recursive)
    end
  end
end

# Derived from Bundler::Definition#to_lock
# Copyright Bundler contributors
# Portions copyright (c) 2010 Andr√© Arko
# Portions copyright (c) 2009 Engine Yard
def to_lock(specs, platforms, dependencies)
  out = ""

  specs.map(&:source).sort_by { |s| s.class.to_s }.uniq.each do |source|
    # Add the source header
    out << source.to_lock
    # Find all specs for this source
    specs.
      select  { |s| s.source == source }.
      # This needs to be sorted by full name so that
      # gems with the same name, but different platform
      # are ordered consistantly
      sort_by { |s| s.full_name }.
      each do |spec|
        next if spec.name == 'bundler'
        out << spec.to_lock
    end
    out << "\n"
  end

  out << "PLATFORMS\n"

  platforms.map { |p| p.to_s }.sort.each do |p|
    out << "  #{p}\n"
  end

  out << "\n"
  out << "DEPENDENCIES\n"

  handled = []
  dependencies.
    sort_by { |d| d.to_s }.
    each do |dep|
      next if handled.include?(dep.name)
      out << dep.to_lock
      handled << dep.name
  end

  out
end

def rewrite_lockfile(lockfile, checkout_base)
  parser = Bundler::LockfileParser.new(lockfile.read)

  candidates = parser.specs.select { |s| Bundler::Source::Git === s.source }
  if candidates.empty?
    @logger.info 'Nothing to see here, move along'
    return
  end

  gemsrc = parser.sources.find { |s| Bundler::Source::Rubygems === s } ||
    Bundler::Source::Rubygems.from_lock('remote' => 'http://rubygems.org')
  lockfile.parent.join('vendor', 'cache').mkpath
  candidates.each do |spec|
    # TODO: shall i sanitize spec.name?
    checkout_dir = checkout_base.join(spec.name)
    checkout(spec, checkout_dir)
    # TODO error handling
    gem_dir = Pathname.glob("#{checkout_dir}/**/#{spec.name}.gemspec")[0].parent
    Dir.chdir(gem_dir) do |dir|
      %x(gem build #{spec.name}.gemspec)
      gempath = gem_dir.join("#{spec.name}-#{spec.version}.gem")
      FileUtils.link([gempath.to_s], lockfile.parent.join('vendor', 'cache').to_s, :verbose => true)
    end
    spec.source = gemsrc
    # make the dependency have "no specified source"
    parser.dependencies.find { |d| d.name == spec.name }.source = nil
  end

  lockfile.open('w') do |f|
    f.puts to_lock(parser.specs, parser.platforms, parser.dependencies)
  end
end

# We don't attempt to be a full ruby parser, only rewrite Gemfiles we wrote
def rewrite_gemfile(gemfile, checkout_base)
  out = ''
  probe = Object.new
  class << probe
    attr_reader :name, :version, :options
    def gem(name, *args)
      @name = name
      @options = args.last.is_a?(Hash) ? args.pop : {}
      @version = args
      unless @options.include?(:git)
        raise ArgumentError, ':git option expected, none found'
      end
      [:git, :github, :branch, :ref, :tag, :submodules].each do |o|
        @options.delete(o)
      end
    end
  end

  gemfile.each_line do |line|
    case line
    when /^\s*gem.*:git/
      if line =~ /#.*:git/ && line !~ /^[^#]+:git/
        out << line
        next
      end
      probe.instance_eval(line)
      gem_args = [probe.name.inspect]
      gem_args.concat(probe.version.map(&:inspect))
      gem_args.concat(probe.options.map { |k,v| "#{k.inspect} => #{v.inspect}" })
      out << "gem #{gem_args.join(', ')}\n"
    else
      out << line
    end
  end
  gemfile.open('w') { |f| f.write(out) }
end

if __FILE__ == $0
  unless ARGV.length == 2
    puts <<-USAGE
Incorrect number of arguments! Usage:
    #{File.basename(__FILE__)} path/to/dir_with_Gemfile path/to/place/git/checkouts
    USAGE
    exit 1
  end

  @logger = Logger.new(STDERR)
  project_dir, checkout_base = ARGV.map { |x| Pathname.new(x).expand_path }
  ENV['BUNDLE_GEMFILE'] = project_dir.join('Gemfile').to_s
  rewrite_lockfile(project_dir.join('Gemfile.lock'), checkout_base)
  rewrite_gemfile(project_dir.join('Gemfile'), checkout_base)
end
